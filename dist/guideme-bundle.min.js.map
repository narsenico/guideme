{"version":3,"sources":["webpack:///guideme-bundle.min.js","webpack:///webpack/bootstrap 47febb8d6b9e93133a3e","webpack:///./src/guideme.js","webpack:///./src/guideme-bundle.js","webpack:///./node_modules/popper.js/dist/esm/popper.js","webpack:///(webpack)/buildin/global.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","global","factory","this","parseElemnt","element","defaultElement","fallToDefault","HTMLElement","NodeList","document","querySelector","$","jquery","parseSelector","selector","querySelectorAll","getWindowSize","e","documentElement","g","getElementsByTagName","width","window","innerWidth","clientWidth","height","innerHeight","clientHeight","createPopper","elDialog","stepTarget","cb","Popper","placement","onCreate","dataObject","classList","toggle","guidemeCenter","scrollIntoView","setTimeout","nvl","text","def","length","resolveFunctionOrValue","fnOrVal","_this","apply","Array","slice","arguments","ofTypeOrThrow","obj","type","error","stepComparer","stepA","stepB","isNaN","order","elementToStep","target","content","getAttribute","title","stringToStep","value","normalizeStep","step","index","getPopperRererenceCenter","modWidth","modHeight","getBoundingClientRect","size","bottom","left","right","top","formatStepCounter","format","replace","GuideMe","options","onKeyDown","event","preventDefault","keyCode","which","performAction","action","showStep","curStepIndex","done","cleanStepElement","stepList","elDialogTitle","innerHTML","instance","showStepCounter","elDialogStepCounter","elDialogBody","add","popper","destroy","onStep","remove","setupEvents","allowKeyboardNavigation","addEventListener","cleanEvents","removeEventListener","createOnStep","createOnDone","attachTo","onDone","destroyOnDone","elOverloay","removeChild","elBody","elDialogFooter","assign","defaultOptions","showOverlay","createElement","className","classes","onclick","overlayClickAction","toUpperCase","appendChild","elDialogHtml","buttons","map","btn","elButton","setAttribute","forEach","from","elStepList","els","ii","hasAttribute","push","jj","addStep","start","initialStep","sort","end","bind","stepAt","jQuery","writable","firstSource","undefined","TypeError","to","nextSource","keysArray","keys","nextIndex","len","nextKey","desc","getOwnPropertyDescriptor","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_0__index_html__","__WEBPACK_IMPORTED_MODULE_1__guideme_css__","__WEBPACK_IMPORTED_MODULE_2__guideme_theme_css__","__WEBPACK_IMPORTED_MODULE_3_popper_js__","__WEBPACK_IMPORTED_MODULE_4__guideme_js__","__WEBPACK_IMPORTED_MODULE_4__guideme_js___default","a","microtaskDebounce","fn","scheduled","elem","MutationObserver","observe","attributes","taskDebounce","timeoutDuration","isFunction","functionToCheck","getType","toString","getStyleComputedProperty","nodeType","css","getComputedStyle","getParentNode","nodeName","parentNode","host","getScrollParent","indexOf","body","_getStyleComputedProp","test","overflow","overflowY","overflowX","getOffsetParent","offsetParent","isOffsetContainer","firstElementChild","getRoot","node","findCommonOffsetParent","element1","element2","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","range","createRange","setStart","setEnd","commonAncestorContainer","contains","element1root","getScroll","side","upperSide","html","scrollingElement","includeScroll","rect","subtract","scrollTop","scrollLeft","modifier","getBordersSize","styles","axis","sideA","sideB","split","getSize","computedStyle","Math","max","isIE10$1","getWindowSizes","getClientRect","offsets","_extends","err","result","sizes","horizScrollbar","offsetWidth","vertScrollbar","offsetHeight","getOffsetRectRelativeToArbitraryNode","children","parent","isIE10","isHTML","childrenRect","parentRect","scrollParent","borderTopWidth","borderLeftWidth","marginTop","marginLeft","getViewportOffsetRectRelativeToArtbitraryNode","relativeOffset","isFixed","getBoundaries","reference","padding","boundariesElement","boundaries","boundariesNode","_getWindowSizes","getArea","_ref","computeAutoPlacement","refRect","rects","sortedAreas","key","area","b","filteredAreas","filter","_ref2","computedPlacement","variation","getReferenceOffsets","state","getOuterSizes","x","parseFloat","marginBottom","marginRight","getOppositePlacement","hash","matched","getPopperOffsets","referenceOffsets","popperRect","popperOffsets","isHoriz","mainSide","secondarySide","measurement","secondaryMeasurement","find","arr","check","findIndex","prop","cur","runModifiers","modifiers","data","ends","function","console","warn","enabled","update","isDestroyed","arrowStyles","flipped","flip","originalPlacement","position","isCreated","onUpdate","isModifierEnabled","modifierName","some","getSupportedPropertyName","prefixes","upperProp","charAt","prefix","toCheck","style","removeAttribute","disableEventListeners","removeOnDestroy","attachToScrollParents","callback","scrollParents","isBody","passive","setupEventListeners","updateBound","scrollElement","eventsEnabled","enableEventListeners","scheduleUpdate","removeEventListeners","cancelAnimationFrame","isNumeric","isFinite","setStyles","unit","setAttributes","applyStyle","arrowElement","applyStyleOnLoad","modifierOptions","computeStyle","y","legacyGpuAccelerationOption","gpuAcceleration","offsetParentRect","floor","prefixedProperty","willChange","invertTop","invertLeft","x-placement","arrow","isModifierRequired","requestingName","requestedName","requesting","isRequired","_requesting","requested","_data$offsets","isVertical","sideCapitalized","toLowerCase","altSide","opSide","arrowElementSize","center","popperMarginSide","sideValue","min","round","getOppositeVariation","clockwise","counter","validPlacements","concat","reverse","placementOpposite","flipOrder","behavior","BEHAVIORS","FLIP","CLOCKWISE","COUNTERCLOCKWISE","refOffsets","overlapsRef","overflowsLeft","overflowsRight","overflowsTop","overflowsBottom","overflowsBoundaries","flippedVariation","flipVariations","keepTogether","toValue","str","match","parseOffset","offset","basePlacement","useHeight","fragments","frag","trim","divider","search","splitRegex","ops","op","mergeWithPrevious","reduce","index2","preventOverflow","priority","primary","escapeWithReference","secondary","shift","shiftvariation","shiftOffsets","hide","bound","inner","subtractLength","nativeHints","isBrowser","longerTimeoutBrowsers","navigator","userAgent","supportsNativeMutationObserver","hint","debounce","appVersion","classCallCheck","Constructor","createClass","defineProperties","props","descriptor","protoProps","staticProps","source","placements","onLoad","Defaults","requestAnimationFrame","Utils","PopperUtils","Function","eval"],"mappings":"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","file":"guideme-bundle.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// import styles from './guideme.css'\n// import themeStyles from './guideme-theme.css'\n// import Popper from 'popper.js';\n\n(function(global, factory) {\n     true ? module.exports = factory() :\n        typeof define === 'function' && define.amd ? define(factory) :\n        (global.GuideMe = factory());\n}(this, (function() {\n    'use strict';\n\n    var $ = window && window.jQuery;\n\n    // @see https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    if (!Object.assign) {\n        Object.defineProperty(Object, 'assign', {\n            enumerable: false,\n            configurable: true,\n            writable: true,\n            value: function(target, firstSource) {\n                'use strict';\n                if (target === undefined || target === null) {\n                    throw new TypeError('Cannot convert first argument to object');\n                }\n\n                var to = Object(target);\n                for (var i = 1; i < arguments.length; i++) {\n                    var nextSource = arguments[i];\n                    if (nextSource === undefined || nextSource === null) {\n                        continue;\n                    }\n                    nextSource = Object(nextSource);\n\n                    var keysArray = Object.keys(Object(nextSource));\n                    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {\n                        var nextKey = keysArray[nextIndex];\n                        var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n                        if (desc !== undefined && desc.enumerable) {\n                            to[nextKey] = nextSource[nextKey];\n                        }\n                    }\n                }\n                return to;\n            }\n        });\n    }\n\n    function parseElemnt(element, defaultElement, fallToDefault) {\n        if (!element) {\n            return defaultElement;\n        } else if (element instanceof HTMLElement) {\n            return element;\n        } else if (element instanceof NodeList) {\n            return element[0];\n        } else if (typeof element == 'string') {\n            return document.querySelector(element);\n        } else if ($ && element.jquery) {\n            return element.get(0);\n        } else if (fallToDefault) {\n            return defaultElement;\n        } else {\n            return null;\n        }\n    }\n\n    // ritorna null o un array di elementi\n    function parseSelector(selector) {\n        if (!selector) {\n            return null;\n        } else if (selector instanceof HTMLElement) {\n            return [selector];\n        } else if (selector instanceof NodeList) {\n            return selector;\n        } else if (typeof selector == 'string') {\n            return document.querySelectorAll(selector);\n        } else if ($ && selector.jquery) {\n            return selector.get();\n        } else {\n            return null;\n        }\n    }\n\n    function getBodySize() {\n        var w = document.body.clientWidth,\n            h = document.body.clientHeight;\n        return { \"width\": w, \"height\": h };\n    }\n\n    function getWindowSize() {\n        var e = document.documentElement,\n            g = document.getElementsByTagName('body')[0],\n            w = window.innerWidth || e.clientWidth || g.clientWidth,\n            h = window.innerHeight || e.clientHeight || g.clientHeight;\n        return { \"width\": w, \"height\": h };\n    }\n\n    function createPopper(elDialog, stepTarget, cb) {\n        return new Popper(stepTarget, elDialog, {\n            \"placement\": \"bottom-start\",\n            \"onCreate\": function(dataObject) {\n                // se è posizionato in centro nascondo la freccia\n                elDialog.classList.toggle('guideme-center',\n                    stepTarget.guidemeCenter === true);\n                // scroll automatico perché il target sia sempre visibile\n                //  non uso elDialog perché il suo posizionamento può essere ritardato da Popper\n                //  e in ogni caso potrebbe non essere visibile il target\n                if (stepTarget.scrollIntoView) {\n                    // ritardo di un poco perché su chrome (e forse su altri) \n                    //  lo scroll al primo step non funziona\n                    setTimeout(function() {\n                        stepTarget.scrollIntoView(false);\n                    }, 100);\n                }\n                cb && cb(elDialog, stepTarget, this);\n            }\n        });\n    }\n\n    function nvl(text, def) {\n        return !text || text.length === 0 ? def : text;\n    }\n\n    function resolveFunctionOrValue(fnOrVal, _this) {\n        if (typeof fnOrVal == 'function' || false) {\n            return fnOrVal.apply(_this, Array.prototype.slice.call(arguments, 2));\n        } else {\n            return fnOrVal;\n        }\n    }\n\n    // ritorna obj se del tipo previsto, oppure scatena un errore\n    function ofTypeOrThrow(obj, type, error) {\n        if (typeof obj == type || false) {\n            return obj;\n        } else {\n            throw error || 'Invalid type: must be a ' + type;\n        }\n    }\n\n    function stepComparer(stepA, stepB) {\n        if (isNaN(stepB.order)) return -1;\n        if (isNaN(stepA.order)) return 1;\n        return (+stepA.order || 0) - (+stepB.order || 0);\n    }\n\n    function elementToStep(element) {\n        return {\n            \"target\": element,\n            // se il valore dell'attributo data-guideme è vuoto uso title\n            \"content\": nvl(element.getAttribute('data-guideme'),\n                element.title),\n            \"order\": +element.getAttribute('data-guideme-order')\n        };\n    }\n\n    function stringToStep(value) {\n        return {\n            \"content\": nvl(value, '')\n        };\n    }\n\n    function normalizeStep(step, index) {\n        if (isNaN(step.order)) {\n            step.order = index;\n        }\n        return step;\n    }\n\n    // elemento di riferimento per posizionare Popper al centro dello schermo\n    function getPopperRererenceCenter(element) {\n        var modWidth = -element.clientWidth / 2,\n            modHeight = -element.clientHeight / 2;\n        return {\n            \"guidemeCenter\": true,\n            \"clientWidth\": 1,\n            \"clientHeight\": 1,\n            \"getBoundingClientRect\": function() {\n                var size = getWindowSize();\n                return {\n                    \"bottom\": size.height / 2 + modHeight,\n                    \"height\": 1,\n                    \"left\": size.width / 2 + modWidth,\n                    \"right\": size.width / 2 + modWidth,\n                    \"top\": size.height / 2 + modHeight,\n                    \"width\": 1\n                };\n            }\n        }\n    }\n\n    function formatStepCounter(format, index, length) {\n        if (format === true) {\n            return (index + 1) + '/' + length;\n        } else if (format) {\n            return format.replace(/%1/, (index + 1)).replace(/%2/, length);\n        } else {\n            return '';\n        }\n    }\n\n    var defaultOptions = {\n        attachTo: null,\n        classes: null,\n        title: null,\n        destroyOnDone: false,\n        allowKeyboardNavigation: true,\n        showOverlay: true,\n        showStepCounter: false,\n        overlayClickAction: 'done',\n        buttons: [\n            { \"text\": \"done\", \"action\": \"done\" },\n            { \"text\": \"prev\", \"action\": \"prev\" },\n            { \"text\": \"next\", \"action\": \"next\" }\n        ]\n    };\n\n    var elDialogHtml = '<div x-arrow></div><div class=\"guideme-header\"><span class=\"guideme-title\"></span><span class=\"guideme-step-counter\"></span></div><div class=\"guideme-body\"></div><div class=\"guideme-footer\"></div>';\n\n    /**\n     * Crea una guida.\n     * GuideMe().from('body').start();\n     *\n     * @param      {Object}  options  opzioni\n     * @return     {Object}  ritorna una istanza di guideme\n     */\n    function GuideMe(options) {\n        var elBody = document.querySelector('body'),\n            elOverloay, elDialog, elDialogTitle, elDialogStepCounter, elDialogBody, elDialogFooter,\n            stepList = [],\n            popper,\n            curStepIndex,\n            instance;\n\n        var onStep, onDone;\n\n        options = Object.assign({}, defaultOptions, options);\n        options.attachTo = parseElemnt(options.attachTo, elBody, true);\n        options.attachTo.classList.add('guideme');\n\n        // creo il div per mascherare la pagina\n        if (options.showOverlay) {\n            elOverloay = document.createElement('div');\n            elOverloay.innerHTML = '&nbsp;';\n            elOverloay.className = 'guideme-overlay ' + nvl(options.classes, '');\n            elOverloay.onclick = function() {\n                performAction((options.overlayClickAction || '').toString().toUpperCase());\n            }\n            options.attachTo.appendChild(elOverloay);\n        }\n\n        // creo il dialog\n        elDialog = document.createElement('div');\n        elDialog.innerHTML = elDialogHtml;\n        elDialog.className = 'guideme-dialog';\n        if (options.classes) {\n            elDialog.className += ' ' + nvl(options.classes, '');\n        }\n        elDialogTitle = elDialog.querySelector('.guideme-title');\n        elDialogStepCounter = elDialog.querySelector('.guideme-step-counter');\n        elDialogBody = elDialog.querySelector('.guideme-body');\n        elDialogFooter = elDialog.querySelector('.guideme-footer');\n        // se non ci sono pulsanti nascondo il footer\n        if (options.buttons && options.buttons.length > 0) {\n            options.buttons.map(function(btn) {\n                var elButton = document.createElement('button');\n                elButton.className = 'guideme-button';\n                elButton.innerHTML = btn.text;\n                elButton.setAttribute('data-action', btn.action);\n                elButton.onclick = function() {\n                    performAction((btn.action || '').toString().toUpperCase());\n                };\n                return elButton;\n            }).forEach(function(element) {\n                elDialogFooter.appendChild(element);\n            });\n        } else {\n            elDialog.className += ' guideme-no-footer';\n        }\n        options.attachTo.appendChild(elDialog);\n\n        /// funzioni interne ///\n\n        function onKeyDown(event) {\n            event.preventDefault();\n            // event.stopPropagation();\n            switch (event.keyCode || event.which) {\n                case 13: // enter\n                case 39: // arraow right\n                    performAction('NEXT');\n                    break;\n                case 8: // back\n                case 37: // arrow left\n                    performAction('PREV');\n                    break;\n                case 27: // esc\n                    performAction('DONE');\n                    break;\n            }\n        }\n\n        function performAction(action) {\n            switch (action) {\n                case 'NEXT':\n                    showStep((+curStepIndex || 0) + 1);\n                    break;\n                case 'PREV':\n                    showStep((+curStepIndex || 0) - 1);\n                    break;\n                case 'DONE':\n                    done();\n                    break;\n            }\n        }\n\n        function showStep(index) {\n            if (index < 0) return;\n            // pulisco il tag dello step precedente\n            if (!isNaN(curStepIndex)) {\n                cleanStepElement(+curStepIndex);\n            }\n            // se non ci sono più step da mostrare termino la guida\n            if (index >= stepList.length) {\n                done();\n                return;\n            }\n\n            curStepIndex = index;\n\n            var step = stepList[index];\n            elDialogTitle.innerHTML = nvl(resolveFunctionOrValue(options.title, instance, index, step), '');\n            if (options.showStepCounter) {\n                elDialogStepCounter.innerHTML = formatStepCounter(resolveFunctionOrValue(options.showStepCounter, instance), index, stepList.length);\n            }\n            elDialogBody.innerHTML = nvl(resolveFunctionOrValue(step.content, instance, index, step), '');\n            elDialog.classList.toggle('guideme-start', index === 0);\n            elDialog.classList.toggle('guideme-end', index === stepList.length - 1);\n            if (step.target) {\n                step.target.classList.add('guideme-step-target');\n                popper && popper.destroy();\n                // posiziono il dialogo rispetto al tag di riferimento\n                popper = createPopper(elDialog, step.target, onStep);\n            } else {\n                popper && popper.destroy();\n                // posiziono al centro dello schermo\n                popper = createPopper(elDialog, getPopperRererenceCenter(elDialog), onStep);\n            }\n        }\n\n        function cleanStepElement(index) {\n            if (stepList[index].target) {\n                stepList[index].target.classList.remove('guideme-step-target');\n            }\n        }\n\n        function setupEvents() {\n            // gestisco gli eventi per la navigazione\n            if (options.allowKeyboardNavigation) {\n                window.addEventListener('keydown', onKeyDown);\n            }\n        }\n\n        function cleanEvents() {\n            if (options.allowKeyboardNavigation) {\n                window.removeEventListener('keydown', onKeyDown);\n            }\n        }\n\n        function createOnStep(cb) {\n            return function(target, stepTarget, popper) {\n                cb(stepList[curStepIndex], curStepIndex, target, stepTarget, popper);\n            };\n        }\n\n        function createOnDone(cb) {\n            return function() {\n                // richiamo cb indicando se gli step sono finiti o se la sequenza è stata interrotta\n                cb(curStepIndex === stepList.length - 1);\n            }\n        }\n\n        function done() {\n            cleanEvents();\n            if (!isNaN(curStepIndex)) {\n                cleanStepElement(+curStepIndex);\n            }\n            options.attachTo.classList.remove('guideme-show');\n            popper && popper.destroy();\n            onDone && onDone();\n            if (options.destroyOnDone) {\n                destroy();\n            }\n        }\n\n        function destroy() {\n            if (elOverloay) {\n                options.attachTo.removeChild(elOverloay);\n            }\n            options.attachTo.removeChild(elDialog);\n            options.attachTo.classList.remove('guideme', 'guideme-show');\n            stepList = elBody = elOverloay = elDialog =\n                elDialogTitle = elDialogStepCounter =\n                elDialogBody = elDialogFooter =\n                null;\n        }\n\n        // creo l'istanza da ritornare con la funzione\n        instance = {\n            /**\n             * Individua gli elementi con l'attributo [data-guideme] e li aggiunge come step.\n             * Vengono considerati gli elementi stessi individuati da \"from\" che il loro contenuto.\n             *\n             * @param      {HTMLElement, NodeList, selector, jQuery}  selector  uno o più elementi a partire dai quali creare gli step\n             * @return     {Object}  this\n             */\n            from: function(selector) {\n                var els = parseSelector(selector),\n                    elStepList;\n                // console.log(selector, els); \n                if (els) {\n                    for (var ii = 0; ii < els.length; ii++) {\n                        // se l'elemento è [data-guideme] lo aggiungo\n                        if (els[ii].hasAttribute('data-guideme')) {\n                            stepList.push(normalizeStep(elementToStep(els[ii]), stepList.length));\n                        }\n                        // cerco al suo interno tutti gli elementi con [data-guideme]\n                        elStepList = els[ii].querySelectorAll('[data-guideme]');\n                        for (var jj = 0; jj < elStepList.length; jj++) {\n                            stepList.push(normalizeStep(elementToStep(elStepList[jj]), stepList.length));\n                        }\n                    }\n                }\n                return this;\n            },\n            /**\n             * Aggiunge uno step.\n             * Lo step può essere uno Step, una funzione che ritorna uno Step, \n             * o una stringa che diverrà il contenuto di uno Step senza elememnto.\n             *\n             * @param      {string|Object|Function}  step    lo step\n             * @return     {Object}  this\n             */\n            addStep: function(step) {\n                if (typeof step == 'string') {\n                    stepList.push(normalizeStep(stringToStep(step), stepList.length));\n                } else {\n                    stepList.push(normalizeStep(resolveFunctionOrValue(step, this), stepList.length));\n                }\n                return this;\n            },\n            start: function(initialStep) {\n                stepList.sort(stepComparer);\n                // console.log(stepList)\n                setupEvents();\n                showStep(+initialStep || 0)\n                options.attachTo.classList.add('guideme', 'guideme-show');\n                return this;\n            },\n            // exec: function(action) {\n            //     performAction((action || '').toString().toUpperCase())\n            //     return this;\n            // },\n            end: function() {\n                done();\n                return this;\n            },\n            destroy: function() {\n                done();\n                destroy();\n                return this;\n            },\n            /**\n             * Richiama la callback al cambio di step.\n             * All'interno della callback this si riferisce a questa istanza.\n             *\n             * @param      {Function}  cb      callback(step, index, target, stepTarget, popper)\n             * @return     {Object}    this\n             */\n            onStep: function(cb) {\n                if (!cb) {\n                    onStep = null;\n                } else {\n                    // creo una funzione che al suo interno richiama cb bindata a this\n                    onStep = createOnStep(ofTypeOrThrow(cb, 'function', 'cb must be a function').bind(this));\n                }\n                return this;\n            },\n            /**\n             * Richiama la callback al termine della sequenza, anche se interrotta.\n             * All'interno della callback this si riferisce a questa istanza.\n             *\n             * @param      {Function}  cb      callback(finished: boolean)\n             * @return     {Object}    this\n             */\n            onDone: function(cb) {\n                if (!cb) {\n                    onDone = null;\n                } else {\n                    // creo una funzione che al suo interno richiama cb bindata a this\n                    onDone = createOnDone(ofTypeOrThrow(cb, 'function', 'cb must be a function').bind(this));\n                }\n                return this;\n            },\n            stepAt: function(index) {\n                return stepList[+index];\n            }\n        };\n\n        // proprietà in sola lettura\n        Object.defineProperty(instance, 'stepCount', {\n            \"get\": function() {\n                return stepList.length;\n            }\n        });\n        Object.defineProperty(instance, 'stepIndex', {\n            \"get\": function() {\n                return curStepIndex;\n            }\n        });\n\n        return instance;\n    }\n\n    return GuideMe;\n})));\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index_html__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index_html___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__index_html__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__guideme_css__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__guideme_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__guideme_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__guideme_theme_css__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__guideme_theme_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__guideme_theme_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_popper_js__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__guideme_js__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__guideme_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__guideme_js__);\n\n\n\n\n\n\nwindow.Popper = __WEBPACK_IMPORTED_MODULE_3_popper_js__[\"a\" /* default */];\nwindow.GuideMe = __WEBPACK_IMPORTED_MODULE_4__guideme_js___default.a;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 5 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/**!\n * @fileOverview Kickass library to create and place poppers near their reference elements.\n * @version 1.12.5\n * @license\n * Copyright (c) 2016 Federico Zivolo and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nvar nativeHints = ['native code', '[object MutationObserverConstructor]'];\n\n/**\n * Determine if a function is implemented natively (as opposed to a polyfill).\n * @method\n * @memberof Popper.Utils\n * @argument {Function | undefined} fn the function to check\n * @returns {Boolean}\n */\nvar isNative = (function (fn) {\n  return nativeHints.some(function (hint) {\n    return (fn || '').toString().indexOf(hint) > -1;\n  });\n});\n\nvar isBrowser = typeof window !== 'undefined';\nvar longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\nvar timeoutDuration = 0;\nfor (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n  if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n    timeoutDuration = 1;\n    break;\n  }\n}\n\nfunction microtaskDebounce(fn) {\n  var scheduled = false;\n  var i = 0;\n  var elem = document.createElement('span');\n\n  // MutationObserver provides a mechanism for scheduling microtasks, which\n  // are scheduled *before* the next task. This gives us a way to debounce\n  // a function but ensure it's called *before* the next paint.\n  var observer = new MutationObserver(function () {\n    fn();\n    scheduled = false;\n  });\n\n  observer.observe(elem, { attributes: true });\n\n  return function () {\n    if (!scheduled) {\n      scheduled = true;\n      elem.setAttribute('x-index', i);\n      i = i + 1; // don't use compund (+=) because it doesn't get optimized in V8\n    }\n  };\n}\n\nfunction taskDebounce(fn) {\n  var scheduled = false;\n  return function () {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(function () {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\n// It's common for MutationObserver polyfills to be seen in the wild, however\n// these rely on Mutation Events which only occur when an element is connected\n// to the DOM. The algorithm used in this module does not use a connected element,\n// and so we must ensure that a *native* MutationObserver is available.\nvar supportsNativeMutationObserver = isBrowser && isNative(window.MutationObserver);\n\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nvar debounce = supportsNativeMutationObserver ? microtaskDebounce : taskDebounce;\n\n/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nfunction isFunction(functionToCheck) {\n  var getType = {};\n  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n}\n\n/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nfunction getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  var css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n\n/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nfunction getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nfunction getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element || ['HTML', 'BODY', '#document'].indexOf(element.nodeName) !== -1) {\n    return window.document.body;\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n\n  var _getStyleComputedProp = getStyleComputedProperty(element),\n      overflow = _getStyleComputedProp.overflow,\n      overflowX = _getStyleComputedProp.overflowX,\n      overflowY = _getStyleComputedProp.overflowY;\n\n  if (/(auto|scroll)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nfunction getOffsetParent(element) {\n  // NOTE: 1 DOM access here\n  var offsetParent = element && element.offsetParent;\n  var nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return window.document.documentElement;\n  }\n\n  // .offsetParent will return the closest TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n  if (['TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n\nfunction isOffsetContainer(element) {\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY') {\n    return false;\n  }\n  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;\n}\n\n/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nfunction getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nfunction findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return window.document.documentElement;\n  }\n\n  // Here we make sure to give as \"start\" the element that comes first in the DOM\n  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;\n  var start = order ? element1 : element2;\n  var end = order ? element2 : element1;\n\n  // Get common ancestor container\n  var range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  var commonAncestorContainer = range.commonAncestorContainer;\n\n  // Both nodes are inside #document\n\n  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  var element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n\n/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nfunction getScroll(element) {\n  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';\n\n  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    var html = window.document.documentElement;\n    var scrollingElement = window.document.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nfunction includeScroll(rect, element) {\n  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var scrollTop = getScroll(element, 'top');\n  var scrollLeft = getScroll(element, 'left');\n  var modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n\n/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nfunction getBordersSize(styles, axis) {\n  var sideA = axis === 'x' ? 'Left' : 'Top';\n  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n  return +styles['border' + sideA + 'Width'].split('px')[0] + +styles['border' + sideB + 'Width'].split('px')[0];\n}\n\n/**\n * Tells if you are running Internet Explorer 10\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean} isIE10\n */\nvar isIE10 = undefined;\n\nvar isIE10$1 = function () {\n  if (isIE10 === undefined) {\n    isIE10 = navigator.appVersion.indexOf('MSIE 10') !== -1;\n  }\n  return isIE10;\n};\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE10$1() ? html['offset' + axis] + computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')] + computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')] : 0);\n}\n\nfunction getWindowSizes() {\n  var body = window.document.body;\n  var html = window.document.documentElement;\n  var computedStyle = isIE10$1() && window.getComputedStyle(html);\n\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle)\n  };\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\nvar defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nfunction getClientRect(offsets) {\n  return _extends({}, offsets, {\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height\n  });\n}\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nfunction getBoundingClientRect(element) {\n  var rect = {};\n\n  // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n  if (isIE10$1()) {\n    try {\n      rect = element.getBoundingClientRect();\n      var scrollTop = getScroll(element, 'top');\n      var scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    } catch (err) {}\n  } else {\n    rect = element.getBoundingClientRect();\n  }\n\n  var result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top\n  };\n\n  // subtract scrollbar size from sizes\n  var sizes = element.nodeName === 'HTML' ? getWindowSizes() : {};\n  var width = sizes.width || element.clientWidth || result.right - result.left;\n  var height = sizes.height || element.clientHeight || result.bottom - result.top;\n\n  var horizScrollbar = element.offsetWidth - width;\n  var vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    var styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n\nfunction getOffsetRectRelativeToArbitraryNode(children, parent) {\n  var isIE10 = isIE10$1();\n  var isHTML = parent.nodeName === 'HTML';\n  var childrenRect = getBoundingClientRect(children);\n  var parentRect = getBoundingClientRect(parent);\n  var scrollParent = getScrollParent(children);\n\n  var styles = getStyleComputedProperty(parent);\n  var borderTopWidth = +styles.borderTopWidth.split('px')[0];\n  var borderLeftWidth = +styles.borderLeftWidth.split('px')[0];\n\n  var offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (!isIE10 && isHTML) {\n    var marginTop = +styles.marginTop.split('px')[0];\n    var marginLeft = +styles.marginLeft.split('px')[0];\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (isIE10 ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n\nfunction getViewportOffsetRectRelativeToArtbitraryNode(element) {\n  var html = window.document.documentElement;\n  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  var width = Math.max(html.clientWidth, window.innerWidth || 0);\n  var height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  var scrollTop = getScroll(html);\n  var scrollLeft = getScroll(html, 'left');\n\n  var offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width: width,\n    height: height\n  };\n\n  return getClientRect(offset);\n}\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\nfunction isFixed(element) {\n  var nodeName = element.nodeName;\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n  return isFixed(getParentNode(element));\n}\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @returns {Object} Coordinates of the boundaries\n */\nfunction getBoundaries(popper, reference, padding, boundariesElement) {\n  // NOTE: 1 DOM access here\n  var boundaries = { top: 0, left: 0 };\n  var offsetParent = findCommonOffsetParent(popper, reference);\n\n  // Handle viewport case\n  if (boundariesElement === 'viewport') {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent);\n  } else {\n    // Handle other cases based on DOM element used as boundaries\n    var boundariesNode = void 0;\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(popper));\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = window.document.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = window.document.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent);\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      var _getWindowSizes = getWindowSizes(),\n          height = _getWindowSizes.height,\n          width = _getWindowSizes.width;\n\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  boundaries.left += padding;\n  boundaries.top += padding;\n  boundaries.right -= padding;\n  boundaries.bottom -= padding;\n\n  return boundaries;\n}\n\nfunction getArea(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {\n  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);\n\n  var rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height\n    }\n  };\n\n  var sortedAreas = Object.keys(rects).map(function (key) {\n    return _extends({\n      key: key\n    }, rects[key], {\n      area: getArea(rects[key])\n    });\n  }).sort(function (a, b) {\n    return b.area - a.area;\n  });\n\n  var filteredAreas = sortedAreas.filter(function (_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height;\n    return width >= popper.clientWidth && height >= popper.clientHeight;\n  });\n\n  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;\n\n  var variation = placement.split('-')[1];\n\n  return computedPlacement + (variation ? '-' + variation : '');\n}\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nfunction getReferenceOffsets(state, popper, reference) {\n  var commonOffsetParent = findCommonOffsetParent(popper, reference);\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent);\n}\n\n/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nfunction getOuterSizes(element) {\n  var styles = window.getComputedStyle(element);\n  var x = parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);\n  var y = parseFloat(styles.marginLeft) + parseFloat(styles.marginRight);\n  var result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x\n  };\n  return result;\n}\n\n/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nfunction getOppositePlacement(placement) {\n  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nfunction getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0];\n\n  // Get popper node sizes\n  var popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  var popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  var mainSide = isHoriz ? 'top' : 'left';\n  var secondarySide = isHoriz ? 'left' : 'top';\n  var measurement = isHoriz ? 'height' : 'width';\n  var secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n\n/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(function (cur) {\n      return cur[prop] === value;\n    });\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn't supported\n  var match = find(arr, function (obj) {\n    return obj[prop] === value;\n  });\n  return arr.indexOf(match);\n}\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nfunction runModifiers(modifiers, data, ends) {\n  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n  modifiersToRun.forEach(function (modifier) {\n    if (modifier.function) {\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n    var fn = modifier.function || modifier.fn;\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nfunction update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  var data = {\n    instance: this,\n    styles: {},\n    arrowStyles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {}\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);\n  data.offsets.popper.position = 'absolute';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n\n/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nfunction isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(function (_ref) {\n    var name = _ref.name,\n        enabled = _ref.enabled;\n    return enabled && name === modifierName;\n  });\n}\n\n/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\nfunction getSupportedPropertyName(property) {\n  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (var i = 0; i < prefixes.length - 1; i++) {\n    var prefix = prefixes[i];\n    var toCheck = prefix ? '' + prefix + upperProp : property;\n    if (typeof window.document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n\n/**\n * Destroy the popper\n * @method\n * @memberof Popper\n */\nfunction destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.left = '';\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicity asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  var isBody = scrollParent.nodeName === 'BODY';\n  var target = isBody ? window : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction setupEventListeners(reference, options, state, updateBound) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  window.addEventListener('resize', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  var scrollElement = getScrollParent(reference);\n  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nfunction enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);\n  }\n}\n\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  window.removeEventListener('resize', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(function (target) {\n    target.removeEventListener('scroll', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger onUpdate callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nfunction disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    window.cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n\n/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nfunction isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setStyles(element, styles) {\n  Object.keys(styles).forEach(function (prop) {\n    var unit = '';\n    // add unit if the value is numeric and is one of the following\n    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {\n      unit = 'px';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n\n/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function (prop) {\n    var value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nfunction applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if arrowElement is defined and arrowStyles has some properties\n  if (data.arrowElement && Object.keys(data.arrowStyles).length) {\n    setStyles(data.arrowElement, data.arrowStyles);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper.\n * @param {Object} options - Popper.js options\n */\nfunction applyStyleOnLoad(reference, popper, options, modifierOptions, state) {\n  // compute reference element offsets\n  var referenceOffsets = getReferenceOffsets(state, popper, reference);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);\n\n  popper.setAttribute('x-placement', placement);\n\n  // Apply `position` to popper before anything else because\n  // without the position applied we can't guarantee correct computations\n  setStyles(popper, { position: 'absolute' });\n\n  return options;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeStyle(data, options) {\n  var x = options.x,\n      y = options.y;\n  var popper = data.offsets.popper;\n\n  // Remove this legacy support in Popper.js v2\n\n  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'applyStyle';\n  }).gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');\n  }\n  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;\n\n  var offsetParent = getOffsetParent(data.instance.popper);\n  var offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  var styles = {\n    position: popper.position\n  };\n\n  // floor sides to avoid blurry text\n  var offsets = {\n    left: Math.floor(popper.left),\n    top: Math.floor(popper.top),\n    bottom: Math.floor(popper.bottom),\n    right: Math.floor(popper.right)\n  };\n\n  var sideA = x === 'bottom' ? 'top' : 'bottom';\n  var sideB = y === 'right' ? 'left' : 'right';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  var prefixedProperty = getSupportedPropertyName('transform');\n\n  // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  var left = void 0,\n      top = void 0;\n  if (sideA === 'bottom') {\n    top = -offsetParentRect.height + offsets.bottom;\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === 'right') {\n    left = -offsetParentRect.width + offsets.right;\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    var invertTop = sideA === 'bottom' ? -1 : 1;\n    var invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = sideA + ', ' + sideB;\n  }\n\n  // Attributes\n  var attributes = {\n    'x-placement': data.placement\n  };\n\n  // Update `data` attributes, styles and arrowStyles\n  data.attributes = _extends({}, attributes, data.attributes);\n  data.styles = _extends({}, styles, data.styles);\n  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);\n\n  return data;\n}\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nfunction isModifierRequired(modifiers, requestingName, requestedName) {\n  var requesting = find(modifiers, function (_ref) {\n    var name = _ref.name;\n    return name === requestingName;\n  });\n\n  var isRequired = !!requesting && modifiers.some(function (modifier) {\n    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;\n  });\n\n  if (!isRequired) {\n    var _requesting = '`' + requestingName + '`';\n    var requested = '`' + requestedName + '`';\n    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');\n  }\n  return isRequired;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction arrow(data, options) {\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  var arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it's a CSS selector\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don't run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn('WARNING: `arrow.element` must be child of its popper element!');\n      return data;\n    }\n  }\n\n  var placement = data.placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n  var len = isVertical ? 'height' : 'width';\n  var sideCapitalized = isVertical ? 'Top' : 'Left';\n  var side = sideCapitalized.toLowerCase();\n  var altSide = isVertical ? 'left' : 'top';\n  var opSide = isVertical ? 'bottom' : 'right';\n  var arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its\n  // reference have enough pixels in conjuction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];\n  }\n\n  // compute center of the popper\n  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  // take popper margin in account because we don't have this info available\n  var popperMarginSide = getStyleComputedProperty(data.instance.popper, 'margin' + sideCapitalized).replace('px', '');\n  var sideValue = center - getClientRect(data.offsets.popper)[side] - popperMarginSide;\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = {};\n  data.offsets.arrow[side] = Math.round(sideValue);\n  data.offsets.arrow[altSide] = ''; // make sure to unset any eventual altSide value from the DOM node\n\n  return data;\n}\n\n/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nfunction getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n  return variation;\n}\n\n/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-right` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nvar placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];\n\n// Get rid of `auto` `auto-start` and `auto-end`\nvar validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nfunction clockwise(placement) {\n  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var index = validPlacements.indexOf(placement);\n  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n\nvar BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise'\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement);\n\n  var placement = data.placement.split('-')[0];\n  var placementOpposite = getOppositePlacement(placement);\n  var variation = data.placement.split('-')[1] || '';\n\n  var flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach(function (step, index) {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    var popperOffsets = data.offsets.popper;\n    var refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    var floor = Math.floor;\n    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);\n\n    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;\n\n    // flip the variation if required\n    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n    var flippedVariation = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : '');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));\n\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction keepTogether(data) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var placement = data.placement.split('-')[0];\n  var floor = Math.floor;\n  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  var side = isVertical ? 'right' : 'bottom';\n  var opSide = isVertical ? 'left' : 'top';\n  var measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nfunction toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  var split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  var value = +split[1];\n  var unit = split[2];\n\n  // If it's not a number it's an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    var element = void 0;\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    var rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    var size = void 0;\n    if (unit === 'vh') {\n      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n    } else {\n      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nfunction parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {\n  var offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  var fragments = offset.split(/(\\+|\\-)/).map(function (frag) {\n    return frag.trim();\n  });\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  var divider = fragments.indexOf(find(fragments, function (frag) {\n    return frag.search(/,|\\s/) !== -1;\n  }));\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  var splitRegex = /\\s*,\\s*|\\s+/;\n  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map(function (op, index) {\n    // Most of the units rely on the orientation of the popper\n    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';\n    var mergeWithPrevious = false;\n    return op\n    // This aggregates any `+` or `-` sign that aren't considered operators\n    // e.g.: 10 + +5 => [10, +, +5]\n    .reduce(function (a, b) {\n      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n        a[a.length - 1] = b;\n        mergeWithPrevious = true;\n        return a;\n      } else if (mergeWithPrevious) {\n        a[a.length - 1] += b;\n        mergeWithPrevious = false;\n        return a;\n      } else {\n        return a.concat(b);\n      }\n    }, [])\n    // Here we convert the string values into number values (in px)\n    .map(function (str) {\n      return toValue(str, measurement, popperOffsets, referenceOffsets);\n    });\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach(function (op, index) {\n    op.forEach(function (frag, index2) {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nfunction offset(data, _ref) {\n  var offset = _ref.offset;\n  var placement = data.placement,\n      _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var basePlacement = placement.split('-')[0];\n\n  var offsets = void 0;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction preventOverflow(data, options) {\n  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement);\n  options.boundaries = boundaries;\n\n  var order = options.priority;\n  var popper = data.offsets.popper;\n\n  var check = {\n    primary: function primary(placement) {\n      var value = popper[placement];\n      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return defineProperty({}, placement, value);\n    },\n    secondary: function secondary(placement) {\n      var mainSide = placement === 'right' ? 'left' : 'top';\n      var value = popper[mainSide];\n      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {\n        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));\n      }\n      return defineProperty({}, mainSide, value);\n    }\n  };\n\n  order.forEach(function (placement) {\n    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    popper = _extends({}, popper, check[side](placement));\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction shift(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var shiftvariation = placement.split('-')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    var _data$offsets = data.offsets,\n        reference = _data$offsets.reference,\n        popper = _data$offsets.popper;\n\n    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    var side = isVertical ? 'left' : 'top';\n    var measurement = isVertical ? 'width' : 'height';\n\n    var shiftOffsets = {\n      start: defineProperty({}, side, reference[side]),\n      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])\n    };\n\n    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  var refRect = data.offsets.reference;\n  var bound = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'preventOverflow';\n  }).boundaries;\n\n  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction inner(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nvar modifiers = {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unitless, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the height.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\n   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\n   * > More on this [reading this issue](https://github.com/FezVrasta/popper.js/issues/373)\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * An scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper this makes sure the popper has always a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier, can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent'\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near eachothers\n   * without leaving any gap between the two. Expecially useful when the arrow is\n   * enabled and you want to assure it to point to its reference element.\n   * It cares only about the first axis, you can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjuction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]'\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations).\n     */\n    behavior: 'flip',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position,\n     * the popper will never be placed outside of the defined boundaries\n     * (except if keepTogether is enabled)\n     */\n    boundariesElement: 'viewport'\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3d transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties.\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right'\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define you own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3d transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties.\n     */\n    gpuAcceleration: undefined\n  }\n};\n\n/**\n * The `dataObject` is an object containing all the informations used by Popper.js\n * this object get passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper.\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper, it expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow, it expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements.\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overriden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass as 3rd argument an object with the same\n * structure of this object, example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nvar Defaults = {\n  /**\n   * Popper's placement\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Whether events (resize, scroll) are initially enabled\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: function onCreate() {},\n\n  /**\n   * Callback called when the popper is updated, this callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: function onUpdate() {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js\n   * @prop {modifiers}\n   */\n  modifiers: modifiers\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n\n// Utils\n// Methods\nvar Popper = function () {\n  /**\n   * Create a new Popper.js instance\n   * @class Popper\n   * @param {HTMLElement|referenceObject} reference - The reference element used to position the popper\n   * @param {HTMLElement} popper - The HTML element used as popper.\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  function Popper(reference, popper) {\n    var _this = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    classCallCheck(this, Popper);\n\n    this.scheduleUpdate = function () {\n      return requestAnimationFrame(_this.update);\n    };\n\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = _extends({}, Popper.Defaults, options);\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: []\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference.jquery ? reference[0] : reference;\n    this.popper = popper.jquery ? popper[0] : popper;\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {\n      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});\n    });\n\n    // Refactoring modifiers' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {\n      return _extends({\n        name: name\n      }, _this.options.modifiers[name]);\n    })\n    // sort the modifiers by order\n    .sort(function (a, b) {\n      return a.order - b.order;\n    });\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(function (modifierOptions) {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    var eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n\n\n  createClass(Popper, [{\n    key: 'update',\n    value: function update$$1() {\n      return update.call(this);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy$$1() {\n      return destroy.call(this);\n    }\n  }, {\n    key: 'enableEventListeners',\n    value: function enableEventListeners$$1() {\n      return enableEventListeners.call(this);\n    }\n  }, {\n    key: 'disableEventListeners',\n    value: function disableEventListeners$$1() {\n      return disableEventListeners.call(this);\n    }\n\n    /**\n     * Schedule an update, it will run on the next UI update available\n     * @method scheduleUpdate\n     * @memberof Popper\n     */\n\n\n    /**\n     * Collection of utilities useful when writing custom modifiers.\n     * Starting from version 1.7, this method is available only if you\n     * include `popper-utils.js` before `popper.js`.\n     *\n     * **DEPRECATION**: This way to access PopperUtils is deprecated\n     * and will be removed in v2! Use the PopperUtils module directly instead.\n     * Due to the high instability of the methods contained in Utils, we can't\n     * guarantee them to follow semver. Use them at your own risk!\n     * @static\n     * @private\n     * @type {Object}\n     * @deprecated since version 1.8\n     * @member Utils\n     * @memberof Popper\n     */\n\n  }]);\n  return Popper;\n}();\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n\n\nPopper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;\nPopper.placements = placements;\nPopper.Defaults = Defaults;\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Popper);\n//# sourceMappingURL=popper.js.map\n\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(6)))\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// guideme-bundle.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 47febb8d6b9e93133a3e","// import styles from './guideme.css'\n// import themeStyles from './guideme-theme.css'\n// import Popper from 'popper.js';\n\n(function(global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n        typeof define === 'function' && define.amd ? define(factory) :\n        (global.GuideMe = factory());\n}(this, (function() {\n    'use strict';\n\n    var $ = window && window.jQuery;\n\n    // @see https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    if (!Object.assign) {\n        Object.defineProperty(Object, 'assign', {\n            enumerable: false,\n            configurable: true,\n            writable: true,\n            value: function(target, firstSource) {\n                'use strict';\n                if (target === undefined || target === null) {\n                    throw new TypeError('Cannot convert first argument to object');\n                }\n\n                var to = Object(target);\n                for (var i = 1; i < arguments.length; i++) {\n                    var nextSource = arguments[i];\n                    if (nextSource === undefined || nextSource === null) {\n                        continue;\n                    }\n                    nextSource = Object(nextSource);\n\n                    var keysArray = Object.keys(Object(nextSource));\n                    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {\n                        var nextKey = keysArray[nextIndex];\n                        var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n                        if (desc !== undefined && desc.enumerable) {\n                            to[nextKey] = nextSource[nextKey];\n                        }\n                    }\n                }\n                return to;\n            }\n        });\n    }\n\n    function parseElemnt(element, defaultElement, fallToDefault) {\n        if (!element) {\n            return defaultElement;\n        } else if (element instanceof HTMLElement) {\n            return element;\n        } else if (element instanceof NodeList) {\n            return element[0];\n        } else if (typeof element == 'string') {\n            return document.querySelector(element);\n        } else if ($ && element.jquery) {\n            return element.get(0);\n        } else if (fallToDefault) {\n            return defaultElement;\n        } else {\n            return null;\n        }\n    }\n\n    // ritorna null o un array di elementi\n    function parseSelector(selector) {\n        if (!selector) {\n            return null;\n        } else if (selector instanceof HTMLElement) {\n            return [selector];\n        } else if (selector instanceof NodeList) {\n            return selector;\n        } else if (typeof selector == 'string') {\n            return document.querySelectorAll(selector);\n        } else if ($ && selector.jquery) {\n            return selector.get();\n        } else {\n            return null;\n        }\n    }\n\n    function getBodySize() {\n        var w = document.body.clientWidth,\n            h = document.body.clientHeight;\n        return { \"width\": w, \"height\": h };\n    }\n\n    function getWindowSize() {\n        var e = document.documentElement,\n            g = document.getElementsByTagName('body')[0],\n            w = window.innerWidth || e.clientWidth || g.clientWidth,\n            h = window.innerHeight || e.clientHeight || g.clientHeight;\n        return { \"width\": w, \"height\": h };\n    }\n\n    function createPopper(elDialog, stepTarget, cb) {\n        return new Popper(stepTarget, elDialog, {\n            \"placement\": \"bottom-start\",\n            \"onCreate\": function(dataObject) {\n                // se è posizionato in centro nascondo la freccia\n                elDialog.classList.toggle('guideme-center',\n                    stepTarget.guidemeCenter === true);\n                // scroll automatico perché il target sia sempre visibile\n                //  non uso elDialog perché il suo posizionamento può essere ritardato da Popper\n                //  e in ogni caso potrebbe non essere visibile il target\n                if (stepTarget.scrollIntoView) {\n                    // ritardo di un poco perché su chrome (e forse su altri) \n                    //  lo scroll al primo step non funziona\n                    setTimeout(function() {\n                        stepTarget.scrollIntoView(false);\n                    }, 100);\n                }\n                cb && cb(elDialog, stepTarget, this);\n            }\n        });\n    }\n\n    function nvl(text, def) {\n        return !text || text.length === 0 ? def : text;\n    }\n\n    function resolveFunctionOrValue(fnOrVal, _this) {\n        if (typeof fnOrVal == 'function' || false) {\n            return fnOrVal.apply(_this, Array.prototype.slice.call(arguments, 2));\n        } else {\n            return fnOrVal;\n        }\n    }\n\n    // ritorna obj se del tipo previsto, oppure scatena un errore\n    function ofTypeOrThrow(obj, type, error) {\n        if (typeof obj == type || false) {\n            return obj;\n        } else {\n            throw error || 'Invalid type: must be a ' + type;\n        }\n    }\n\n    function stepComparer(stepA, stepB) {\n        if (isNaN(stepB.order)) return -1;\n        if (isNaN(stepA.order)) return 1;\n        return (+stepA.order || 0) - (+stepB.order || 0);\n    }\n\n    function elementToStep(element) {\n        return {\n            \"target\": element,\n            // se il valore dell'attributo data-guideme è vuoto uso title\n            \"content\": nvl(element.getAttribute('data-guideme'),\n                element.title),\n            \"order\": +element.getAttribute('data-guideme-order')\n        };\n    }\n\n    function stringToStep(value) {\n        return {\n            \"content\": nvl(value, '')\n        };\n    }\n\n    function normalizeStep(step, index) {\n        if (isNaN(step.order)) {\n            step.order = index;\n        }\n        return step;\n    }\n\n    // elemento di riferimento per posizionare Popper al centro dello schermo\n    function getPopperRererenceCenter(element) {\n        var modWidth = -element.clientWidth / 2,\n            modHeight = -element.clientHeight / 2;\n        return {\n            \"guidemeCenter\": true,\n            \"clientWidth\": 1,\n            \"clientHeight\": 1,\n            \"getBoundingClientRect\": function() {\n                var size = getWindowSize();\n                return {\n                    \"bottom\": size.height / 2 + modHeight,\n                    \"height\": 1,\n                    \"left\": size.width / 2 + modWidth,\n                    \"right\": size.width / 2 + modWidth,\n                    \"top\": size.height / 2 + modHeight,\n                    \"width\": 1\n                };\n            }\n        }\n    }\n\n    function formatStepCounter(format, index, length) {\n        if (format === true) {\n            return (index + 1) + '/' + length;\n        } else if (format) {\n            return format.replace(/%1/, (index + 1)).replace(/%2/, length);\n        } else {\n            return '';\n        }\n    }\n\n    var defaultOptions = {\n        attachTo: null,\n        classes: null,\n        title: null,\n        destroyOnDone: false,\n        allowKeyboardNavigation: true,\n        showOverlay: true,\n        showStepCounter: false,\n        overlayClickAction: 'done',\n        buttons: [\n            { \"text\": \"done\", \"action\": \"done\" },\n            { \"text\": \"prev\", \"action\": \"prev\" },\n            { \"text\": \"next\", \"action\": \"next\" }\n        ]\n    };\n\n    var elDialogHtml = '<div x-arrow></div><div class=\"guideme-header\"><span class=\"guideme-title\"></span><span class=\"guideme-step-counter\"></span></div><div class=\"guideme-body\"></div><div class=\"guideme-footer\"></div>';\n\n    /**\n     * Crea una guida.\n     * GuideMe().from('body').start();\n     *\n     * @param      {Object}  options  opzioni\n     * @return     {Object}  ritorna una istanza di guideme\n     */\n    function GuideMe(options) {\n        var elBody = document.querySelector('body'),\n            elOverloay, elDialog, elDialogTitle, elDialogStepCounter, elDialogBody, elDialogFooter,\n            stepList = [],\n            popper,\n            curStepIndex,\n            instance;\n\n        var onStep, onDone;\n\n        options = Object.assign({}, defaultOptions, options);\n        options.attachTo = parseElemnt(options.attachTo, elBody, true);\n        options.attachTo.classList.add('guideme');\n\n        // creo il div per mascherare la pagina\n        if (options.showOverlay) {\n            elOverloay = document.createElement('div');\n            elOverloay.innerHTML = '&nbsp;';\n            elOverloay.className = 'guideme-overlay ' + nvl(options.classes, '');\n            elOverloay.onclick = function() {\n                performAction((options.overlayClickAction || '').toString().toUpperCase());\n            }\n            options.attachTo.appendChild(elOverloay);\n        }\n\n        // creo il dialog\n        elDialog = document.createElement('div');\n        elDialog.innerHTML = elDialogHtml;\n        elDialog.className = 'guideme-dialog';\n        if (options.classes) {\n            elDialog.className += ' ' + nvl(options.classes, '');\n        }\n        elDialogTitle = elDialog.querySelector('.guideme-title');\n        elDialogStepCounter = elDialog.querySelector('.guideme-step-counter');\n        elDialogBody = elDialog.querySelector('.guideme-body');\n        elDialogFooter = elDialog.querySelector('.guideme-footer');\n        // se non ci sono pulsanti nascondo il footer\n        if (options.buttons && options.buttons.length > 0) {\n            options.buttons.map(function(btn) {\n                var elButton = document.createElement('button');\n                elButton.className = 'guideme-button';\n                elButton.innerHTML = btn.text;\n                elButton.setAttribute('data-action', btn.action);\n                elButton.onclick = function() {\n                    performAction((btn.action || '').toString().toUpperCase());\n                };\n                return elButton;\n            }).forEach(function(element) {\n                elDialogFooter.appendChild(element);\n            });\n        } else {\n            elDialog.className += ' guideme-no-footer';\n        }\n        options.attachTo.appendChild(elDialog);\n\n        /// funzioni interne ///\n\n        function onKeyDown(event) {\n            event.preventDefault();\n            // event.stopPropagation();\n            switch (event.keyCode || event.which) {\n                case 13: // enter\n                case 39: // arraow right\n                    performAction('NEXT');\n                    break;\n                case 8: // back\n                case 37: // arrow left\n                    performAction('PREV');\n                    break;\n                case 27: // esc\n                    performAction('DONE');\n                    break;\n            }\n        }\n\n        function performAction(action) {\n            switch (action) {\n                case 'NEXT':\n                    showStep((+curStepIndex || 0) + 1);\n                    break;\n                case 'PREV':\n                    showStep((+curStepIndex || 0) - 1);\n                    break;\n                case 'DONE':\n                    done();\n                    break;\n            }\n        }\n\n        function showStep(index) {\n            if (index < 0) return;\n            // pulisco il tag dello step precedente\n            if (!isNaN(curStepIndex)) {\n                cleanStepElement(+curStepIndex);\n            }\n            // se non ci sono più step da mostrare termino la guida\n            if (index >= stepList.length) {\n                done();\n                return;\n            }\n\n            curStepIndex = index;\n\n            var step = stepList[index];\n            elDialogTitle.innerHTML = nvl(resolveFunctionOrValue(options.title, instance, index, step), '');\n            if (options.showStepCounter) {\n                elDialogStepCounter.innerHTML = formatStepCounter(resolveFunctionOrValue(options.showStepCounter, instance), index, stepList.length);\n            }\n            elDialogBody.innerHTML = nvl(resolveFunctionOrValue(step.content, instance, index, step), '');\n            elDialog.classList.toggle('guideme-start', index === 0);\n            elDialog.classList.toggle('guideme-end', index === stepList.length - 1);\n            if (step.target) {\n                step.target.classList.add('guideme-step-target');\n                popper && popper.destroy();\n                // posiziono il dialogo rispetto al tag di riferimento\n                popper = createPopper(elDialog, step.target, onStep);\n            } else {\n                popper && popper.destroy();\n                // posiziono al centro dello schermo\n                popper = createPopper(elDialog, getPopperRererenceCenter(elDialog), onStep);\n            }\n        }\n\n        function cleanStepElement(index) {\n            if (stepList[index].target) {\n                stepList[index].target.classList.remove('guideme-step-target');\n            }\n        }\n\n        function setupEvents() {\n            // gestisco gli eventi per la navigazione\n            if (options.allowKeyboardNavigation) {\n                window.addEventListener('keydown', onKeyDown);\n            }\n        }\n\n        function cleanEvents() {\n            if (options.allowKeyboardNavigation) {\n                window.removeEventListener('keydown', onKeyDown);\n            }\n        }\n\n        function createOnStep(cb) {\n            return function(target, stepTarget, popper) {\n                cb(stepList[curStepIndex], curStepIndex, target, stepTarget, popper);\n            };\n        }\n\n        function createOnDone(cb) {\n            return function() {\n                // richiamo cb indicando se gli step sono finiti o se la sequenza è stata interrotta\n                cb(curStepIndex === stepList.length - 1);\n            }\n        }\n\n        function done() {\n            cleanEvents();\n            if (!isNaN(curStepIndex)) {\n                cleanStepElement(+curStepIndex);\n            }\n            options.attachTo.classList.remove('guideme-show');\n            popper && popper.destroy();\n            onDone && onDone();\n            if (options.destroyOnDone) {\n                destroy();\n            }\n        }\n\n        function destroy() {\n            if (elOverloay) {\n                options.attachTo.removeChild(elOverloay);\n            }\n            options.attachTo.removeChild(elDialog);\n            options.attachTo.classList.remove('guideme', 'guideme-show');\n            stepList = elBody = elOverloay = elDialog =\n                elDialogTitle = elDialogStepCounter =\n                elDialogBody = elDialogFooter =\n                null;\n        }\n\n        // creo l'istanza da ritornare con la funzione\n        instance = {\n            /**\n             * Individua gli elementi con l'attributo [data-guideme] e li aggiunge come step.\n             * Vengono considerati gli elementi stessi individuati da \"from\" che il loro contenuto.\n             *\n             * @param      {HTMLElement, NodeList, selector, jQuery}  selector  uno o più elementi a partire dai quali creare gli step\n             * @return     {Object}  this\n             */\n            from: function(selector) {\n                var els = parseSelector(selector),\n                    elStepList;\n                // console.log(selector, els); \n                if (els) {\n                    for (var ii = 0; ii < els.length; ii++) {\n                        // se l'elemento è [data-guideme] lo aggiungo\n                        if (els[ii].hasAttribute('data-guideme')) {\n                            stepList.push(normalizeStep(elementToStep(els[ii]), stepList.length));\n                        }\n                        // cerco al suo interno tutti gli elementi con [data-guideme]\n                        elStepList = els[ii].querySelectorAll('[data-guideme]');\n                        for (var jj = 0; jj < elStepList.length; jj++) {\n                            stepList.push(normalizeStep(elementToStep(elStepList[jj]), stepList.length));\n                        }\n                    }\n                }\n                return this;\n            },\n            /**\n             * Aggiunge uno step.\n             * Lo step può essere uno Step, una funzione che ritorna uno Step, \n             * o una stringa che diverrà il contenuto di uno Step senza elememnto.\n             *\n             * @param      {string|Object|Function}  step    lo step\n             * @return     {Object}  this\n             */\n            addStep: function(step) {\n                if (typeof step == 'string') {\n                    stepList.push(normalizeStep(stringToStep(step), stepList.length));\n                } else {\n                    stepList.push(normalizeStep(resolveFunctionOrValue(step, this), stepList.length));\n                }\n                return this;\n            },\n            start: function(initialStep) {\n                stepList.sort(stepComparer);\n                // console.log(stepList)\n                setupEvents();\n                showStep(+initialStep || 0)\n                options.attachTo.classList.add('guideme', 'guideme-show');\n                return this;\n            },\n            // exec: function(action) {\n            //     performAction((action || '').toString().toUpperCase())\n            //     return this;\n            // },\n            end: function() {\n                done();\n                return this;\n            },\n            destroy: function() {\n                done();\n                destroy();\n                return this;\n            },\n            /**\n             * Richiama la callback al cambio di step.\n             * All'interno della callback this si riferisce a questa istanza.\n             *\n             * @param      {Function}  cb      callback(step, index, target, stepTarget, popper)\n             * @return     {Object}    this\n             */\n            onStep: function(cb) {\n                if (!cb) {\n                    onStep = null;\n                } else {\n                    // creo una funzione che al suo interno richiama cb bindata a this\n                    onStep = createOnStep(ofTypeOrThrow(cb, 'function', 'cb must be a function').bind(this));\n                }\n                return this;\n            },\n            /**\n             * Richiama la callback al termine della sequenza, anche se interrotta.\n             * All'interno della callback this si riferisce a questa istanza.\n             *\n             * @param      {Function}  cb      callback(finished: boolean)\n             * @return     {Object}    this\n             */\n            onDone: function(cb) {\n                if (!cb) {\n                    onDone = null;\n                } else {\n                    // creo una funzione che al suo interno richiama cb bindata a this\n                    onDone = createOnDone(ofTypeOrThrow(cb, 'function', 'cb must be a function').bind(this));\n                }\n                return this;\n            },\n            stepAt: function(index) {\n                return stepList[+index];\n            }\n        };\n\n        // proprietà in sola lettura\n        Object.defineProperty(instance, 'stepCount', {\n            \"get\": function() {\n                return stepList.length;\n            }\n        });\n        Object.defineProperty(instance, 'stepIndex', {\n            \"get\": function() {\n                return curStepIndex;\n            }\n        });\n\n        return instance;\n    }\n\n    return GuideMe;\n})));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/guideme.js\n// module id = 0\n// module chunks = 0 1","import index from './index.html';\nimport styles from './guideme.css';\nimport themeStyles from './guideme-theme.css';\nimport Popper from 'popper.js';\nimport GuideMe from './guideme.js';\n\nwindow.Popper = Popper;\nwindow.GuideMe = GuideMe;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/guideme-bundle.js\n// module id = 1\n// module chunks = 0","/**!\n * @fileOverview Kickass library to create and place poppers near their reference elements.\n * @version 1.12.5\n * @license\n * Copyright (c) 2016 Federico Zivolo and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nvar nativeHints = ['native code', '[object MutationObserverConstructor]'];\n\n/**\n * Determine if a function is implemented natively (as opposed to a polyfill).\n * @method\n * @memberof Popper.Utils\n * @argument {Function | undefined} fn the function to check\n * @returns {Boolean}\n */\nvar isNative = (function (fn) {\n  return nativeHints.some(function (hint) {\n    return (fn || '').toString().indexOf(hint) > -1;\n  });\n});\n\nvar isBrowser = typeof window !== 'undefined';\nvar longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\nvar timeoutDuration = 0;\nfor (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n  if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n    timeoutDuration = 1;\n    break;\n  }\n}\n\nfunction microtaskDebounce(fn) {\n  var scheduled = false;\n  var i = 0;\n  var elem = document.createElement('span');\n\n  // MutationObserver provides a mechanism for scheduling microtasks, which\n  // are scheduled *before* the next task. This gives us a way to debounce\n  // a function but ensure it's called *before* the next paint.\n  var observer = new MutationObserver(function () {\n    fn();\n    scheduled = false;\n  });\n\n  observer.observe(elem, { attributes: true });\n\n  return function () {\n    if (!scheduled) {\n      scheduled = true;\n      elem.setAttribute('x-index', i);\n      i = i + 1; // don't use compund (+=) because it doesn't get optimized in V8\n    }\n  };\n}\n\nfunction taskDebounce(fn) {\n  var scheduled = false;\n  return function () {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(function () {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\n// It's common for MutationObserver polyfills to be seen in the wild, however\n// these rely on Mutation Events which only occur when an element is connected\n// to the DOM. The algorithm used in this module does not use a connected element,\n// and so we must ensure that a *native* MutationObserver is available.\nvar supportsNativeMutationObserver = isBrowser && isNative(window.MutationObserver);\n\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nvar debounce = supportsNativeMutationObserver ? microtaskDebounce : taskDebounce;\n\n/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nfunction isFunction(functionToCheck) {\n  var getType = {};\n  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n}\n\n/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nfunction getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  var css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n\n/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nfunction getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nfunction getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element || ['HTML', 'BODY', '#document'].indexOf(element.nodeName) !== -1) {\n    return window.document.body;\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n\n  var _getStyleComputedProp = getStyleComputedProperty(element),\n      overflow = _getStyleComputedProp.overflow,\n      overflowX = _getStyleComputedProp.overflowX,\n      overflowY = _getStyleComputedProp.overflowY;\n\n  if (/(auto|scroll)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nfunction getOffsetParent(element) {\n  // NOTE: 1 DOM access here\n  var offsetParent = element && element.offsetParent;\n  var nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return window.document.documentElement;\n  }\n\n  // .offsetParent will return the closest TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n  if (['TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n\nfunction isOffsetContainer(element) {\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY') {\n    return false;\n  }\n  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;\n}\n\n/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nfunction getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nfunction findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return window.document.documentElement;\n  }\n\n  // Here we make sure to give as \"start\" the element that comes first in the DOM\n  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;\n  var start = order ? element1 : element2;\n  var end = order ? element2 : element1;\n\n  // Get common ancestor container\n  var range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  var commonAncestorContainer = range.commonAncestorContainer;\n\n  // Both nodes are inside #document\n\n  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  var element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n\n/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nfunction getScroll(element) {\n  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';\n\n  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    var html = window.document.documentElement;\n    var scrollingElement = window.document.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nfunction includeScroll(rect, element) {\n  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var scrollTop = getScroll(element, 'top');\n  var scrollLeft = getScroll(element, 'left');\n  var modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n\n/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nfunction getBordersSize(styles, axis) {\n  var sideA = axis === 'x' ? 'Left' : 'Top';\n  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n  return +styles['border' + sideA + 'Width'].split('px')[0] + +styles['border' + sideB + 'Width'].split('px')[0];\n}\n\n/**\n * Tells if you are running Internet Explorer 10\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean} isIE10\n */\nvar isIE10 = undefined;\n\nvar isIE10$1 = function () {\n  if (isIE10 === undefined) {\n    isIE10 = navigator.appVersion.indexOf('MSIE 10') !== -1;\n  }\n  return isIE10;\n};\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE10$1() ? html['offset' + axis] + computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')] + computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')] : 0);\n}\n\nfunction getWindowSizes() {\n  var body = window.document.body;\n  var html = window.document.documentElement;\n  var computedStyle = isIE10$1() && window.getComputedStyle(html);\n\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle)\n  };\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\nvar defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nfunction getClientRect(offsets) {\n  return _extends({}, offsets, {\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height\n  });\n}\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nfunction getBoundingClientRect(element) {\n  var rect = {};\n\n  // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n  if (isIE10$1()) {\n    try {\n      rect = element.getBoundingClientRect();\n      var scrollTop = getScroll(element, 'top');\n      var scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    } catch (err) {}\n  } else {\n    rect = element.getBoundingClientRect();\n  }\n\n  var result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top\n  };\n\n  // subtract scrollbar size from sizes\n  var sizes = element.nodeName === 'HTML' ? getWindowSizes() : {};\n  var width = sizes.width || element.clientWidth || result.right - result.left;\n  var height = sizes.height || element.clientHeight || result.bottom - result.top;\n\n  var horizScrollbar = element.offsetWidth - width;\n  var vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    var styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n\nfunction getOffsetRectRelativeToArbitraryNode(children, parent) {\n  var isIE10 = isIE10$1();\n  var isHTML = parent.nodeName === 'HTML';\n  var childrenRect = getBoundingClientRect(children);\n  var parentRect = getBoundingClientRect(parent);\n  var scrollParent = getScrollParent(children);\n\n  var styles = getStyleComputedProperty(parent);\n  var borderTopWidth = +styles.borderTopWidth.split('px')[0];\n  var borderLeftWidth = +styles.borderLeftWidth.split('px')[0];\n\n  var offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (!isIE10 && isHTML) {\n    var marginTop = +styles.marginTop.split('px')[0];\n    var marginLeft = +styles.marginLeft.split('px')[0];\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (isIE10 ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n\nfunction getViewportOffsetRectRelativeToArtbitraryNode(element) {\n  var html = window.document.documentElement;\n  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  var width = Math.max(html.clientWidth, window.innerWidth || 0);\n  var height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  var scrollTop = getScroll(html);\n  var scrollLeft = getScroll(html, 'left');\n\n  var offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width: width,\n    height: height\n  };\n\n  return getClientRect(offset);\n}\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\nfunction isFixed(element) {\n  var nodeName = element.nodeName;\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n  return isFixed(getParentNode(element));\n}\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @returns {Object} Coordinates of the boundaries\n */\nfunction getBoundaries(popper, reference, padding, boundariesElement) {\n  // NOTE: 1 DOM access here\n  var boundaries = { top: 0, left: 0 };\n  var offsetParent = findCommonOffsetParent(popper, reference);\n\n  // Handle viewport case\n  if (boundariesElement === 'viewport') {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent);\n  } else {\n    // Handle other cases based on DOM element used as boundaries\n    var boundariesNode = void 0;\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(popper));\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = window.document.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = window.document.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent);\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      var _getWindowSizes = getWindowSizes(),\n          height = _getWindowSizes.height,\n          width = _getWindowSizes.width;\n\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  boundaries.left += padding;\n  boundaries.top += padding;\n  boundaries.right -= padding;\n  boundaries.bottom -= padding;\n\n  return boundaries;\n}\n\nfunction getArea(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {\n  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);\n\n  var rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height\n    }\n  };\n\n  var sortedAreas = Object.keys(rects).map(function (key) {\n    return _extends({\n      key: key\n    }, rects[key], {\n      area: getArea(rects[key])\n    });\n  }).sort(function (a, b) {\n    return b.area - a.area;\n  });\n\n  var filteredAreas = sortedAreas.filter(function (_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height;\n    return width >= popper.clientWidth && height >= popper.clientHeight;\n  });\n\n  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;\n\n  var variation = placement.split('-')[1];\n\n  return computedPlacement + (variation ? '-' + variation : '');\n}\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nfunction getReferenceOffsets(state, popper, reference) {\n  var commonOffsetParent = findCommonOffsetParent(popper, reference);\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent);\n}\n\n/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nfunction getOuterSizes(element) {\n  var styles = window.getComputedStyle(element);\n  var x = parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);\n  var y = parseFloat(styles.marginLeft) + parseFloat(styles.marginRight);\n  var result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x\n  };\n  return result;\n}\n\n/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nfunction getOppositePlacement(placement) {\n  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nfunction getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0];\n\n  // Get popper node sizes\n  var popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  var popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  var mainSide = isHoriz ? 'top' : 'left';\n  var secondarySide = isHoriz ? 'left' : 'top';\n  var measurement = isHoriz ? 'height' : 'width';\n  var secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n\n/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(function (cur) {\n      return cur[prop] === value;\n    });\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn't supported\n  var match = find(arr, function (obj) {\n    return obj[prop] === value;\n  });\n  return arr.indexOf(match);\n}\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nfunction runModifiers(modifiers, data, ends) {\n  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n  modifiersToRun.forEach(function (modifier) {\n    if (modifier.function) {\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n    var fn = modifier.function || modifier.fn;\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nfunction update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  var data = {\n    instance: this,\n    styles: {},\n    arrowStyles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {}\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);\n  data.offsets.popper.position = 'absolute';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n\n/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nfunction isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(function (_ref) {\n    var name = _ref.name,\n        enabled = _ref.enabled;\n    return enabled && name === modifierName;\n  });\n}\n\n/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\nfunction getSupportedPropertyName(property) {\n  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (var i = 0; i < prefixes.length - 1; i++) {\n    var prefix = prefixes[i];\n    var toCheck = prefix ? '' + prefix + upperProp : property;\n    if (typeof window.document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n\n/**\n * Destroy the popper\n * @method\n * @memberof Popper\n */\nfunction destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.left = '';\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicity asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  var isBody = scrollParent.nodeName === 'BODY';\n  var target = isBody ? window : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction setupEventListeners(reference, options, state, updateBound) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  window.addEventListener('resize', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  var scrollElement = getScrollParent(reference);\n  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nfunction enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);\n  }\n}\n\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  window.removeEventListener('resize', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(function (target) {\n    target.removeEventListener('scroll', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger onUpdate callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nfunction disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    window.cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n\n/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nfunction isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setStyles(element, styles) {\n  Object.keys(styles).forEach(function (prop) {\n    var unit = '';\n    // add unit if the value is numeric and is one of the following\n    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {\n      unit = 'px';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n\n/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function (prop) {\n    var value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nfunction applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if arrowElement is defined and arrowStyles has some properties\n  if (data.arrowElement && Object.keys(data.arrowStyles).length) {\n    setStyles(data.arrowElement, data.arrowStyles);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper.\n * @param {Object} options - Popper.js options\n */\nfunction applyStyleOnLoad(reference, popper, options, modifierOptions, state) {\n  // compute reference element offsets\n  var referenceOffsets = getReferenceOffsets(state, popper, reference);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);\n\n  popper.setAttribute('x-placement', placement);\n\n  // Apply `position` to popper before anything else because\n  // without the position applied we can't guarantee correct computations\n  setStyles(popper, { position: 'absolute' });\n\n  return options;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeStyle(data, options) {\n  var x = options.x,\n      y = options.y;\n  var popper = data.offsets.popper;\n\n  // Remove this legacy support in Popper.js v2\n\n  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'applyStyle';\n  }).gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');\n  }\n  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;\n\n  var offsetParent = getOffsetParent(data.instance.popper);\n  var offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  var styles = {\n    position: popper.position\n  };\n\n  // floor sides to avoid blurry text\n  var offsets = {\n    left: Math.floor(popper.left),\n    top: Math.floor(popper.top),\n    bottom: Math.floor(popper.bottom),\n    right: Math.floor(popper.right)\n  };\n\n  var sideA = x === 'bottom' ? 'top' : 'bottom';\n  var sideB = y === 'right' ? 'left' : 'right';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  var prefixedProperty = getSupportedPropertyName('transform');\n\n  // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  var left = void 0,\n      top = void 0;\n  if (sideA === 'bottom') {\n    top = -offsetParentRect.height + offsets.bottom;\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === 'right') {\n    left = -offsetParentRect.width + offsets.right;\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    var invertTop = sideA === 'bottom' ? -1 : 1;\n    var invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = sideA + ', ' + sideB;\n  }\n\n  // Attributes\n  var attributes = {\n    'x-placement': data.placement\n  };\n\n  // Update `data` attributes, styles and arrowStyles\n  data.attributes = _extends({}, attributes, data.attributes);\n  data.styles = _extends({}, styles, data.styles);\n  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);\n\n  return data;\n}\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nfunction isModifierRequired(modifiers, requestingName, requestedName) {\n  var requesting = find(modifiers, function (_ref) {\n    var name = _ref.name;\n    return name === requestingName;\n  });\n\n  var isRequired = !!requesting && modifiers.some(function (modifier) {\n    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;\n  });\n\n  if (!isRequired) {\n    var _requesting = '`' + requestingName + '`';\n    var requested = '`' + requestedName + '`';\n    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');\n  }\n  return isRequired;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction arrow(data, options) {\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  var arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it's a CSS selector\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don't run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn('WARNING: `arrow.element` must be child of its popper element!');\n      return data;\n    }\n  }\n\n  var placement = data.placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n  var len = isVertical ? 'height' : 'width';\n  var sideCapitalized = isVertical ? 'Top' : 'Left';\n  var side = sideCapitalized.toLowerCase();\n  var altSide = isVertical ? 'left' : 'top';\n  var opSide = isVertical ? 'bottom' : 'right';\n  var arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its\n  // reference have enough pixels in conjuction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];\n  }\n\n  // compute center of the popper\n  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  // take popper margin in account because we don't have this info available\n  var popperMarginSide = getStyleComputedProperty(data.instance.popper, 'margin' + sideCapitalized).replace('px', '');\n  var sideValue = center - getClientRect(data.offsets.popper)[side] - popperMarginSide;\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = {};\n  data.offsets.arrow[side] = Math.round(sideValue);\n  data.offsets.arrow[altSide] = ''; // make sure to unset any eventual altSide value from the DOM node\n\n  return data;\n}\n\n/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nfunction getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n  return variation;\n}\n\n/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-right` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nvar placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];\n\n// Get rid of `auto` `auto-start` and `auto-end`\nvar validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nfunction clockwise(placement) {\n  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var index = validPlacements.indexOf(placement);\n  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n\nvar BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise'\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement);\n\n  var placement = data.placement.split('-')[0];\n  var placementOpposite = getOppositePlacement(placement);\n  var variation = data.placement.split('-')[1] || '';\n\n  var flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach(function (step, index) {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    var popperOffsets = data.offsets.popper;\n    var refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    var floor = Math.floor;\n    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);\n\n    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;\n\n    // flip the variation if required\n    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n    var flippedVariation = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : '');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));\n\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction keepTogether(data) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var placement = data.placement.split('-')[0];\n  var floor = Math.floor;\n  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  var side = isVertical ? 'right' : 'bottom';\n  var opSide = isVertical ? 'left' : 'top';\n  var measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nfunction toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  var split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  var value = +split[1];\n  var unit = split[2];\n\n  // If it's not a number it's an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    var element = void 0;\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    var rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    var size = void 0;\n    if (unit === 'vh') {\n      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n    } else {\n      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nfunction parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {\n  var offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  var fragments = offset.split(/(\\+|\\-)/).map(function (frag) {\n    return frag.trim();\n  });\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  var divider = fragments.indexOf(find(fragments, function (frag) {\n    return frag.search(/,|\\s/) !== -1;\n  }));\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  var splitRegex = /\\s*,\\s*|\\s+/;\n  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map(function (op, index) {\n    // Most of the units rely on the orientation of the popper\n    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';\n    var mergeWithPrevious = false;\n    return op\n    // This aggregates any `+` or `-` sign that aren't considered operators\n    // e.g.: 10 + +5 => [10, +, +5]\n    .reduce(function (a, b) {\n      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n        a[a.length - 1] = b;\n        mergeWithPrevious = true;\n        return a;\n      } else if (mergeWithPrevious) {\n        a[a.length - 1] += b;\n        mergeWithPrevious = false;\n        return a;\n      } else {\n        return a.concat(b);\n      }\n    }, [])\n    // Here we convert the string values into number values (in px)\n    .map(function (str) {\n      return toValue(str, measurement, popperOffsets, referenceOffsets);\n    });\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach(function (op, index) {\n    op.forEach(function (frag, index2) {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nfunction offset(data, _ref) {\n  var offset = _ref.offset;\n  var placement = data.placement,\n      _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var basePlacement = placement.split('-')[0];\n\n  var offsets = void 0;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction preventOverflow(data, options) {\n  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement);\n  options.boundaries = boundaries;\n\n  var order = options.priority;\n  var popper = data.offsets.popper;\n\n  var check = {\n    primary: function primary(placement) {\n      var value = popper[placement];\n      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return defineProperty({}, placement, value);\n    },\n    secondary: function secondary(placement) {\n      var mainSide = placement === 'right' ? 'left' : 'top';\n      var value = popper[mainSide];\n      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {\n        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));\n      }\n      return defineProperty({}, mainSide, value);\n    }\n  };\n\n  order.forEach(function (placement) {\n    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    popper = _extends({}, popper, check[side](placement));\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction shift(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var shiftvariation = placement.split('-')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    var _data$offsets = data.offsets,\n        reference = _data$offsets.reference,\n        popper = _data$offsets.popper;\n\n    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    var side = isVertical ? 'left' : 'top';\n    var measurement = isVertical ? 'width' : 'height';\n\n    var shiftOffsets = {\n      start: defineProperty({}, side, reference[side]),\n      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])\n    };\n\n    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  var refRect = data.offsets.reference;\n  var bound = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'preventOverflow';\n  }).boundaries;\n\n  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction inner(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nvar modifiers = {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unitless, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the height.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\n   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\n   * > More on this [reading this issue](https://github.com/FezVrasta/popper.js/issues/373)\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * An scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper this makes sure the popper has always a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier, can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent'\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near eachothers\n   * without leaving any gap between the two. Expecially useful when the arrow is\n   * enabled and you want to assure it to point to its reference element.\n   * It cares only about the first axis, you can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjuction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]'\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations).\n     */\n    behavior: 'flip',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position,\n     * the popper will never be placed outside of the defined boundaries\n     * (except if keepTogether is enabled)\n     */\n    boundariesElement: 'viewport'\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3d transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties.\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right'\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define you own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3d transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties.\n     */\n    gpuAcceleration: undefined\n  }\n};\n\n/**\n * The `dataObject` is an object containing all the informations used by Popper.js\n * this object get passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper.\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper, it expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow, it expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements.\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overriden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass as 3rd argument an object with the same\n * structure of this object, example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nvar Defaults = {\n  /**\n   * Popper's placement\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Whether events (resize, scroll) are initially enabled\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: function onCreate() {},\n\n  /**\n   * Callback called when the popper is updated, this callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: function onUpdate() {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js\n   * @prop {modifiers}\n   */\n  modifiers: modifiers\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n\n// Utils\n// Methods\nvar Popper = function () {\n  /**\n   * Create a new Popper.js instance\n   * @class Popper\n   * @param {HTMLElement|referenceObject} reference - The reference element used to position the popper\n   * @param {HTMLElement} popper - The HTML element used as popper.\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  function Popper(reference, popper) {\n    var _this = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    classCallCheck(this, Popper);\n\n    this.scheduleUpdate = function () {\n      return requestAnimationFrame(_this.update);\n    };\n\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = _extends({}, Popper.Defaults, options);\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: []\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference.jquery ? reference[0] : reference;\n    this.popper = popper.jquery ? popper[0] : popper;\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {\n      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});\n    });\n\n    // Refactoring modifiers' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {\n      return _extends({\n        name: name\n      }, _this.options.modifiers[name]);\n    })\n    // sort the modifiers by order\n    .sort(function (a, b) {\n      return a.order - b.order;\n    });\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(function (modifierOptions) {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    var eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n\n\n  createClass(Popper, [{\n    key: 'update',\n    value: function update$$1() {\n      return update.call(this);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy$$1() {\n      return destroy.call(this);\n    }\n  }, {\n    key: 'enableEventListeners',\n    value: function enableEventListeners$$1() {\n      return enableEventListeners.call(this);\n    }\n  }, {\n    key: 'disableEventListeners',\n    value: function disableEventListeners$$1() {\n      return disableEventListeners.call(this);\n    }\n\n    /**\n     * Schedule an update, it will run on the next UI update available\n     * @method scheduleUpdate\n     * @memberof Popper\n     */\n\n\n    /**\n     * Collection of utilities useful when writing custom modifiers.\n     * Starting from version 1.7, this method is available only if you\n     * include `popper-utils.js` before `popper.js`.\n     *\n     * **DEPRECATION**: This way to access PopperUtils is deprecated\n     * and will be removed in v2! Use the PopperUtils module directly instead.\n     * Due to the high instability of the methods contained in Utils, we can't\n     * guarantee them to follow semver. Use them at your own risk!\n     * @static\n     * @private\n     * @type {Object}\n     * @deprecated since version 1.8\n     * @member Utils\n     * @memberof Popper\n     */\n\n  }]);\n  return Popper;\n}();\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n\n\nPopper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;\nPopper.placements = placements;\nPopper.Defaults = Defaults;\n\nexport default Popper;\n//# sourceMappingURL=popper.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/popper.js/dist/esm/popper.js\n// module id = 5\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}