{"version":3,"sources":["webpack:///guideme-bundle.min.js","webpack:///webpack/bootstrap 6c3687e8e60055ad731c","webpack:///./src/guideme.js","webpack:///./src/guideme-bundle.js","webpack:///./node_modules/popper.js/dist/esm/popper.js","webpack:///(webpack)/buildin/global.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","global","factory","this","parseElemnt","element","defaultElement","fallToDefault","HTMLElement","NodeList","document","querySelector","$","jquery","parseSelector","selector","querySelectorAll","getWindowSize","e","documentElement","g","getElementsByTagName","width","window","innerWidth","clientWidth","height","innerHeight","clientHeight","createPopper","elDialog","stepTarget","cb","Popper","placement","onCreate","dataObject","classList","toggle","guidemeCenter","scrollIntoView","setTimeout","nvl","text","def","length","resolveFunctionOrValue","fnOrVal","_this","apply","Array","slice","arguments","ofTypeOrThrow","obj","type","error","stepComparer","stepA","stepB","isNaN","order","elementToStep","target","content","getAttribute","title","stringToStep","value","normalizeStep","step","index","getPopperRererenceCenter","modWidth","modHeight","getBoundingClientRect","size","bottom","left","right","top","GuideMe","options","onKeyDown","event","preventDefault","stopPropagation","keyCode","which","performAction","action","showStep","curStepIndex","done","cleanStepElement","stepList","elDialogTitle","innerHTML","instance","elDialogBody","add","popper","destroy","onStep","remove","setupEvents","allowKeyboardNavigation","addEventListener","cleanEvents","removeEventListener","createOnStep","createOnDone","attachTo","onDone","destroyOnDone","elOverloay","removeChild","elBody","elDialogFooter","assign","defaultOptions","showOverlay","createElement","className","classes","onclick","overlayClickAction","toUpperCase","appendChild","elDialogHtml","buttons","map","btn","elButton","setAttribute","forEach","from","elStepList","els","ii","hasAttribute","push","jj","addStep","start","initialStep","sort","end","bind","stepAt","jQuery","writable","firstSource","undefined","TypeError","to","nextSource","keysArray","keys","nextIndex","len","nextKey","desc","getOwnPropertyDescriptor","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_0__index_html__","__WEBPACK_IMPORTED_MODULE_1__guideme_css__","__WEBPACK_IMPORTED_MODULE_2__guideme_theme_css__","__WEBPACK_IMPORTED_MODULE_3_popper_js__","__WEBPACK_IMPORTED_MODULE_4__guideme_js__","__WEBPACK_IMPORTED_MODULE_4__guideme_js___default","a","microtaskDebounce","fn","scheduled","elem","MutationObserver","observe","attributes","taskDebounce","timeoutDuration","isFunction","functionToCheck","getType","toString","getStyleComputedProperty","nodeType","css","getComputedStyle","getParentNode","nodeName","parentNode","host","getScrollParent","indexOf","body","_getStyleComputedProp","test","overflow","overflowY","overflowX","getOffsetParent","offsetParent","isOffsetContainer","firstElementChild","getRoot","node","findCommonOffsetParent","element1","element2","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","range","createRange","setStart","setEnd","commonAncestorContainer","contains","element1root","getScroll","side","upperSide","html","scrollingElement","includeScroll","rect","subtract","scrollTop","scrollLeft","modifier","getBordersSize","styles","axis","sideA","sideB","split","getSize","computedStyle","Math","max","isIE10$1","getWindowSizes","getClientRect","offsets","_extends","err","result","sizes","horizScrollbar","offsetWidth","vertScrollbar","offsetHeight","getOffsetRectRelativeToArbitraryNode","children","parent","isIE10","isHTML","childrenRect","parentRect","scrollParent","borderTopWidth","borderLeftWidth","marginTop","marginLeft","getViewportOffsetRectRelativeToArtbitraryNode","relativeOffset","isFixed","getBoundaries","reference","padding","boundariesElement","boundaries","boundariesNode","_getWindowSizes","getArea","_ref","computeAutoPlacement","refRect","rects","sortedAreas","key","area","b","filteredAreas","filter","_ref2","computedPlacement","variation","getReferenceOffsets","state","getOuterSizes","x","parseFloat","marginBottom","marginRight","getOppositePlacement","hash","replace","matched","getPopperOffsets","referenceOffsets","popperRect","popperOffsets","isHoriz","mainSide","secondarySide","measurement","secondaryMeasurement","find","arr","check","findIndex","prop","cur","runModifiers","modifiers","data","ends","function","console","warn","enabled","update","isDestroyed","flipped","flip","originalPlacement","position","isCreated","onUpdate","isModifierEnabled","modifierName","some","getSupportedPropertyName","prefixes","upperProp","charAt","prefix","toCheck","style","removeAttribute","disableEventListeners","removeOnDestroy","attachToScrollParents","callback","scrollParents","isBody","passive","setupEventListeners","updateBound","scrollElement","eventsEnabled","enableEventListeners","scheduleUpdate","removeEventListeners","cancelAnimationFrame","isNumeric","isFinite","setStyles","unit","setAttributes","applyStyle","arrow","arrowElement","applyStyleOnLoad","modifierOptions","computeStyle","y","legacyGpuAccelerationOption","gpuAcceleration","offsetParentRect","floor","prefixedProperty","willChange","invertTop","invertLeft","x-placement","isModifierRequired","requestingName","requestedName","requesting","isRequired","_requesting","requested","_data$offsets","isVertical","altSide","opSide","arrowElementSize","center","sideValue","min","round","getOppositeVariation","clockwise","counter","validPlacements","concat","reverse","placementOpposite","flipOrder","behavior","BEHAVIORS","FLIP","CLOCKWISE","COUNTERCLOCKWISE","refOffsets","overlapsRef","overflowsLeft","overflowsRight","overflowsTop","overflowsBottom","overflowsBoundaries","flippedVariation","flipVariations","keepTogether","toValue","str","match","parseOffset","offset","basePlacement","useHeight","fragments","frag","trim","divider","search","splitRegex","ops","op","mergeWithPrevious","reduce","index2","preventOverflow","priority","primary","escapeWithReference","secondary","shift","shiftvariation","shiftOffsets","hide","bound","inner","subtractLength","nativeHints","isBrowser","longerTimeoutBrowsers","navigator","userAgent","supportsNativeMutationObserver","hint","debounce","appVersion","classCallCheck","Constructor","createClass","defineProperties","props","descriptor","protoProps","staticProps","source","placements","onLoad","Defaults","requestAnimationFrame","Utils","PopperUtils","Function","eval"],"mappings":"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","file":"guideme-bundle.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// import styles from './guideme.css'\n// import themeStyles from './guideme-theme.css'\n// import Popper from 'popper.js';\n\n(function (global, factory) {\n     true ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global.GuideMe = factory());\n}(this, (function () { 'use strict';\n\n    var $ = window && window.jQuery;\n\n    // @see https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    if (!Object.assign) {\n        Object.defineProperty(Object, 'assign', {\n            enumerable: false,\n            configurable: true,\n            writable: true,\n            value: function(target, firstSource) {\n                'use strict';\n                if (target === undefined || target === null) {\n                    throw new TypeError('Cannot convert first argument to object');\n                }\n\n                var to = Object(target);\n                for (var i = 1; i < arguments.length; i++) {\n                    var nextSource = arguments[i];\n                    if (nextSource === undefined || nextSource === null) {\n                        continue;\n                    }\n                    nextSource = Object(nextSource);\n\n                    var keysArray = Object.keys(Object(nextSource));\n                    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {\n                        var nextKey = keysArray[nextIndex];\n                        var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n                        if (desc !== undefined && desc.enumerable) {\n                            to[nextKey] = nextSource[nextKey];\n                        }\n                    }\n                }\n                return to;\n            }\n        });\n    }\n\n    function parseElemnt(element, defaultElement, fallToDefault) {\n        if (!element) {\n            return defaultElement;\n        } else if (element instanceof HTMLElement) {\n            return element;\n        } else if (element instanceof NodeList) {\n            return element[0];\n        } else if (typeof element == 'string') {\n            return document.querySelector(element);\n        } else if ($ && element.jquery) {\n            return element.get(0);\n        } else if (fallToDefault) {\n            return defaultElement;\n        } else {\n            return null;\n        }\n    }\n\n    // ritorna null o un array di elementi\n    function parseSelector(selector) {\n        if (!selector) {\n            return null;\n        } else if (selector instanceof HTMLElement) {\n            return [selector];\n        } else if (selector instanceof NodeList) {\n            return selector;\n        } else if (typeof selector == 'string') {\n            return document.querySelectorAll(selector);\n        } else if ($ && selector.jquery) {\n            return selector.get();\n        } else {\n            return null;\n        }\n    }\n\n    function getBodySize() {\n        var w = document.body.clientWidth,\n            h = document.body.clientHeight;\n        return { \"width\": w, \"height\": h };\n    }\n\n    function getWindowSize() {\n        var e = document.documentElement,\n            g = document.getElementsByTagName('body')[0],\n            w = window.innerWidth || e.clientWidth || g.clientWidth,\n            h = window.innerHeight || e.clientHeight || g.clientHeight;\n        return { \"width\": w, \"height\": h };\n    }\n\n    function createPopper(elDialog, stepTarget, cb) {\n        return new Popper(stepTarget, elDialog, {\n            \"placement\": \"bottom-start\",\n            \"onCreate\": function(dataObject) {\n                // se è posizionato in centro nascondo la freccia\n                elDialog.classList.toggle('guideme-center',\n                    stepTarget.guidemeCenter === true);\n                // scroll automatico perché il target sia sempre visibile\n                //  non uso elDialog perché il suo posizionamento può essere ritardato da Popper\n                //  e in ogni caso potrebbe non essere visibile il target\n                if (stepTarget.scrollIntoView) {\n                    // ritardo di un poco perché su chrome (e forse su altri) \n                    //  lo scroll al primo step non funziona\n                    setTimeout(function() {\n                        stepTarget.scrollIntoView(false); \n                    }, 100);\n                }\n                cb && cb(elDialog, stepTarget, this);\n            }\n        });\n    }\n\n    function nvl(text, def) {\n        return !text || text.length === 0 ? def : text;\n    }\n\n    function resolveFunctionOrValue(fnOrVal, _this) {\n        if (typeof fnOrVal == 'function' || false) {\n            return fnOrVal.apply(_this, Array.prototype.slice.call(arguments, 2));\n        } else {\n            return fnOrVal;\n        }\n    }\n\n    // ritorna obj se del tipo previsto, oppure scatena un errore\n    function ofTypeOrThrow(obj, type, error) {\n        if (typeof obj == type || false) {\n            return obj;\n        } else {\n            throw error || 'Invalid type: must be a ' + type;\n        }\n    }\n\n    function stepComparer(stepA, stepB) {\n        if (isNaN(stepB.order)) return -1;\n        if (isNaN(stepA.order)) return 1;\n        return (+stepA.order || 0) - (+stepB.order || 0);\n    }\n\n    function elementToStep(element) {\n        return {\n            \"target\": element,\n            // se il valore dell'attributo data-guideme è vuoto uso title\n            \"content\": nvl(element.getAttribute('data-guideme'),\n                element.title),\n            \"order\": +element.getAttribute('data-guideme-step')\n        };\n    }\n\n    function stringToStep(value) {\n        return {\n            \"content\": nvl(value, '')\n        };\n    }\n\n    function normalizeStep(step, index) {\n        if (isNaN(step.order)) {\n            step.order = index;\n        }\n        return step;\n    }\n\n    // elemento di riferimento per posizionare Popper al centro dello schermo\n    function getPopperRererenceCenter(element) {\n        var modWidth = -element.clientWidth / 2,\n            modHeight = -element.clientHeight / 2;\n        return {\n            \"guidemeCenter\": true,\n            \"clientWidth\": 1,\n            \"clientHeight\": 1,\n            \"getBoundingClientRect\": function() {\n                var size = getWindowSize();\n                return {\n                    \"bottom\": size.height / 2 + modHeight,\n                    \"height\": 1,\n                    \"left\": size.width / 2 + modWidth,\n                    \"right\": size.width / 2 + modWidth,\n                    \"top\": size.height / 2 + modHeight,\n                    \"width\": 1\n                };\n            }\n        }\n    }\n\n    var defaultOptions = {\n        attachTo: null,\n        classes: null,\n        title: null,\n        destroyOnDone: false,\n        allowKeyboardNavigation: true,\n        showOverlay: true,\n        overlayClickAction: 'done',\n        buttons: [\n            { \"text\": \"done\", \"action\": \"done\" },\n            { \"text\": \"prev\", \"action\": \"prev\" },\n            { \"text\": \"next\", \"action\": \"next\" }\n        ]\n    };\n\n    var elDialogHtml = '<div x-arrow></div><div class=\"guideme-title\"></div><div class=\"guideme-body\"></div><div class=\"guideme-footer\"></div>';\n\n    /**\n     * Crea una guida.\n     * GuideMe().from('body').start();\n     *\n     * @param      {Object}  options  opzioni\n     * @return     {Object}  ritorna una istanza di guideme\n     */\n    function GuideMe(options) {\n        var elBody = document.querySelector('body'),\n            elOverloay, elDialog, elDialogTitle, elDialogBody, elDialogFooter,\n            stepList = [],\n            popper,\n            curStepIndex,\n            instance;\n\n        var onStep, onDone;\n\n        options = Object.assign({}, defaultOptions, options);\n        options.attachTo = parseElemnt(options.attachTo, elBody, true);\n        options.attachTo.classList.add('guideme');\n\n        // creo il div per mascherare la pagina\n        if (options.showOverlay) {\n            elOverloay = document.createElement('div');\n            elOverloay.innerHTML = '&nbsp;';\n            elOverloay.className = 'guideme-overlay ' + nvl(options.classes, '');\n            elOverloay.onclick = function() {\n                performAction((options.overlayClickAction || '').toString().toUpperCase());\n            }\n            options.attachTo.appendChild(elOverloay);\n        }\n\n        // creo il dialog\n        elDialog = document.createElement('div');\n        elDialog.innerHTML = elDialogHtml;\n        elDialog.className = 'guideme-dialog';\n        if (options.classes) {\n            elDialog.className += ' ' + nvl(options.classes, '');\n        }\n        elDialogTitle = elDialog.querySelector('.guideme-title');\n        elDialogBody = elDialog.querySelector('.guideme-body');\n        elDialogFooter = elDialog.querySelector('.guideme-footer');\n        options.buttons.map(function(btn) {\n            var elButton = document.createElement('button');\n            elButton.className = 'guideme-button';\n            elButton.innerHTML = btn.text;\n            elButton.setAttribute('data-action', btn.action);\n            elButton.onclick = function() {\n                performAction((btn.action || '').toString().toUpperCase());\n            };\n            return elButton;\n        }).forEach(function(element) {\n            elDialogFooter.appendChild(element);\n        });\n        options.attachTo.appendChild(elDialog);\n\n        /// funzioni interne ///\n\n        function onKeyDown(event) {\n            event.preventDefault();\n            event.stopPropagation();\n            switch (event.keyCode || event.which) {\n                case 13: // enter\n                case 39: // arraow right\n                    performAction('NEXT');\n                    break;\n                case 8: // back\n                case 37: // arrow left\n                    performAction('PREV');\n                    break;\n                case 27: // esc\n                    performAction('DONE');\n                    break;\n            }\n        }\n\n        function performAction(action) {\n            switch (action) {\n                case 'NEXT':\n                    showStep((+curStepIndex || 0) + 1);\n                    break;\n                case 'PREV':\n                    showStep((+curStepIndex || 0) - 1);\n                    break;\n                case 'DONE':\n                    done();\n                    break;\n            }\n        }\n\n        function showStep(index) {\n            if (index < 0) return;\n            // pulisco il tag dello step precedente\n            if (!isNaN(curStepIndex)) {\n                cleanStepElement(+curStepIndex);\n            }\n            // se non ci sono più step da mostrare termino la guida\n            if (index >= stepList.length) {\n                done();\n                return;\n            }\n\n            curStepIndex = index;\n\n            var step = stepList[index];\n            elDialogTitle.innerHTML = nvl(resolveFunctionOrValue(options.title, instance, index, step), '');\n            elDialogBody.innerHTML = nvl(resolveFunctionOrValue(step.content, instance, index, step), '');\n            elDialog.classList.toggle('guideme-start', index === 0);\n            elDialog.classList.toggle('guideme-end', index === stepList.length - 1);\n            if (step.target) {\n                step.target.classList.add('guideme-step-target');\n                popper && popper.destroy();\n                // posiziono il dialogo rispetto al tag di riferimento\n                popper = createPopper(elDialog, step.target, onStep);\n            } else {\n                popper && popper.destroy();\n                // posiziono al centro dello schermo\n                popper = createPopper(elDialog, getPopperRererenceCenter(elDialog), onStep);\n            }\n        }\n\n        function cleanStepElement(index) {\n            if (stepList[index].target) {\n                stepList[index].target.classList.remove('guideme-step-target');\n            }\n        }\n\n        function setupEvents() {\n            // gestisco gli eventi per la navigazione\n            if (options.allowKeyboardNavigation) {\n                window.addEventListener('keydown', onKeyDown);\n            }\n        }\n\n        function cleanEvents() {\n            if (options.allowKeyboardNavigation) {\n                window.removeEventListener('keydown', onKeyDown);\n            }\n        }\n\n        function createOnStep(cb) {\n            return function(target, stepTarget, popper) {\n                cb(stepList[curStepIndex], curStepIndex, target, stepTarget, popper);\n            };\n        }\n\n        function createOnDone(cb) {\n            return function() {\n                // richiamo cb indicando se gli step sono finiti o se la sequenza è stata interrotta\n                cb(curStepIndex === stepList.length - 1);\n            }\n        }\n\n        function done() {\n            cleanEvents();\n            if (!isNaN(curStepIndex)) {\n                cleanStepElement(+curStepIndex);\n            }\n            options.attachTo.classList.remove('guideme-show');\n            popper && popper.destroy();\n            onDone && onDone();\n            if (options.destroyOnDone) {\n                destroy();\n            }\n        }\n\n        function destroy() {\n            if (elOverloay) {\n                options.attachTo.removeChild(elOverloay);\n            }\n            options.attachTo.removeChild(elDialog);\n            options.attachTo.classList.remove('guideme', 'guideme-show');\n            stepList = elBody = elOverloay = elDialog =\n                elDialogTitle = elDialogBody = elDialogFooter =\n                null;\n        }\n\n        // creo l'istanza da ritornare con la funzione\n        instance = {\n            /**\n             * Individua gli elementi con l'attributo [data-guideme] e li aggiunge come step.\n             * Vengono considerati gli elementi stessi individuati da \"from\" che il loro contenuto.\n             *\n             * @param      {HTMLElement, NodeList, selector, jQuery}  selector  uno o più elementi a partire dai quali creare gli step\n             * @return     {Object}  this\n             */\n            from: function(selector) {\n                var els = parseSelector(selector),\n                    elStepList;\n                // console.log(selector, els); \n                if (els) {\n                    for (var ii = 0; ii < els.length; ii++) {\n                        // se l'elemento è [data-guideme] lo aggiungo\n                        if (els[ii].hasAttribute('data-guideme')) {\n                            stepList.push(normalizeStep(elementToStep(els[ii]), stepList.length));\n                        }\n                        // cerco al suo interno tutti gli elementi con [data-guideme]\n                        elStepList = els[ii].querySelectorAll('[data-guideme]');\n                        for (var jj = 0; jj < elStepList.length; jj++) {\n                            stepList.push(normalizeStep(elementToStep(elStepList[jj]), stepList.length));\n                        }\n                    }\n                }\n                return this;\n            },\n            /**\n             * Aggiunge uno step (tag con attributo [data-guideme]).\n             * Lo step può essere uno Step, una funzione che ritorna uno Step, \n             * o una stringa che diverrà il contenuto di uno Step senza elememnto.\n             *\n             * @param      {string|Object|Function}  step    lo step\n             * @return     {Object}  this\n             */\n            addStep: function(step) {\n                if (typeof step == 'string') {\n                    stepList.push(normalizeStep(stringToStep(step), stepList.length));\n                } else {\n                    stepList.push(normalizeStep(resolveFunctionOrValue(step, this), stepList.length));\n                }\n                return this;\n            },\n            start: function(initialStep) {\n                stepList.sort(stepComparer);\n                // console.log(stepList)\n                setupEvents();\n                showStep(+initialStep || 0)\n                options.attachTo.classList.add('guideme', 'guideme-show');\n                return this;\n            },\n            // exec: function(action) {\n            //     performAction((action || '').toString().toUpperCase())\n            //     return this;\n            // },\n            end: function() {\n                done();\n                return this;\n            },\n            destroy: function() {\n                done();\n                destroy();\n                return this;\n            },\n            /**\n             * Richiama la callback al cambio di step.\n             * All'interno della callback this si riferisce a questa istanza.\n             *\n             * @param      {Function}  cb      callback(step, index, target, stepTarget, popper)\n             * @return     {Object}    this\n             */\n            onStep: function(cb) {\n                if (!cb) {\n                    onStep = null;\n                } else {\n                    // creo una funzione che al suo interno richiama cb bindata a this\n                    onStep = createOnStep(ofTypeOrThrow(cb, 'function', 'cb must be a function').bind(this));\n                }\n                return this;\n            },\n            /**\n             * Richiama la callback al termine della sequenza, anche se interrotta.\n             * All'interno della callback this si riferisce a questa istanza.\n             *\n             * @param      {Function}  cb      callback(finished: boolean)\n             * @return     {Object}    this\n             */\n            onDone: function(cb) {\n                if (!cb) {\n                    onDone = null;\n                } else {\n                    // creo una funzione che al suo interno richiama cb bindata a this\n                    onDone = createOnDone(ofTypeOrThrow(cb, 'function', 'cb must be a function').bind(this));\n                }\n                return this;\n            },\n            stepAt: function(index) {\n                return stepList[+index];\n            }\n        };\n\n        // proprietà in sola lettura\n        Object.defineProperty(instance, 'stepCount', {\n            \"get\": function() {\n                return stepList.length;\n            }\n        });\n        Object.defineProperty(instance, 'stepIndex', {\n            \"get\": function() {\n                return curStepIndex;\n            }\n        });\n\n        return instance;\n    }\n\n    return GuideMe;\n})));\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index_html__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index_html___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__index_html__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__guideme_css__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__guideme_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__guideme_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__guideme_theme_css__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__guideme_theme_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__guideme_theme_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_popper_js__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__guideme_js__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__guideme_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__guideme_js__);\n\n\n\n\n\n\nwindow.Popper = __WEBPACK_IMPORTED_MODULE_3_popper_js__[\"a\" /* default */];\nwindow.GuideMe = __WEBPACK_IMPORTED_MODULE_4__guideme_js___default.a;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 5 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/**!\n * @fileOverview Kickass library to create and place poppers near their reference elements.\n * @version 1.11.1\n * @license\n * Copyright (c) 2016 Federico Zivolo and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nvar nativeHints = ['native code', '[object MutationObserverConstructor]'];\n\n/**\n * Determine if a function is implemented natively (as opposed to a polyfill).\n * @method\n * @memberof Popper.Utils\n * @argument {Function | undefined} fn the function to check\n * @returns {Boolean}\n */\nvar isNative = (function (fn) {\n  return nativeHints.some(function (hint) {\n    return (fn || '').toString().indexOf(hint) > -1;\n  });\n});\n\nvar isBrowser = typeof window !== 'undefined';\nvar longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\nvar timeoutDuration = 0;\nfor (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n  if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n    timeoutDuration = 1;\n    break;\n  }\n}\n\nfunction microtaskDebounce(fn) {\n  var scheduled = false;\n  var i = 0;\n  var elem = document.createElement('span');\n\n  // MutationObserver provides a mechanism for scheduling microtasks, which\n  // are scheduled *before* the next task. This gives us a way to debounce\n  // a function but ensure it's called *before* the next paint.\n  var observer = new MutationObserver(function () {\n    fn();\n    scheduled = false;\n  });\n\n  observer.observe(elem, { attributes: true });\n\n  return function () {\n    if (!scheduled) {\n      scheduled = true;\n      elem.setAttribute('x-index', i);\n      i = i + 1; // don't use compund (+=) because it doesn't get optimized in V8\n    }\n  };\n}\n\nfunction taskDebounce(fn) {\n  var scheduled = false;\n  return function () {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(function () {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\n// It's common for MutationObserver polyfills to be seen in the wild, however\n// these rely on Mutation Events which only occur when an element is connected\n// to the DOM. The algorithm used in this module does not use a connected element,\n// and so we must ensure that a *native* MutationObserver is available.\nvar supportsNativeMutationObserver = isBrowser && isNative(window.MutationObserver);\n\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nvar debounce = supportsNativeMutationObserver ? microtaskDebounce : taskDebounce;\n\n/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nfunction isFunction(functionToCheck) {\n  var getType = {};\n  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n}\n\n/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nfunction getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  var css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n\n/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nfunction getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nfunction getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element || ['HTML', 'BODY', '#document'].indexOf(element.nodeName) !== -1) {\n    return window.document.body;\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n\n  var _getStyleComputedProp = getStyleComputedProperty(element),\n      overflow = _getStyleComputedProp.overflow,\n      overflowX = _getStyleComputedProp.overflowX,\n      overflowY = _getStyleComputedProp.overflowY;\n\n  if (/(auto|scroll)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nfunction getOffsetParent(element) {\n  // NOTE: 1 DOM access here\n  var offsetParent = element && element.offsetParent;\n  var nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return window.document.documentElement;\n  }\n\n  // .offsetParent will return the closest TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n  if (['TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n\nfunction isOffsetContainer(element) {\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY') {\n    return false;\n  }\n  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;\n}\n\n/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nfunction getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nfunction findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return window.document.documentElement;\n  }\n\n  // Here we make sure to give as \"start\" the element that comes first in the DOM\n  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;\n  var start = order ? element1 : element2;\n  var end = order ? element2 : element1;\n\n  // Get common ancestor container\n  var range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  var commonAncestorContainer = range.commonAncestorContainer;\n\n  // Both nodes are inside #document\n\n  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  var element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n\n/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nfunction getScroll(element) {\n  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';\n\n  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    var html = window.document.documentElement;\n    var scrollingElement = window.document.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nfunction includeScroll(rect, element) {\n  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var scrollTop = getScroll(element, 'top');\n  var scrollLeft = getScroll(element, 'left');\n  var modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n\n/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nfunction getBordersSize(styles, axis) {\n  var sideA = axis === 'x' ? 'Left' : 'Top';\n  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n  return +styles['border' + sideA + 'Width'].split('px')[0] + +styles['border' + sideB + 'Width'].split('px')[0];\n}\n\n/**\n * Tells if you are running Internet Explorer 10\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean} isIE10\n */\nvar isIE10 = undefined;\n\nvar isIE10$1 = function () {\n  if (isIE10 === undefined) {\n    isIE10 = navigator.appVersion.indexOf('MSIE 10') !== -1;\n  }\n  return isIE10;\n};\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(body['offset' + axis], html['client' + axis], html['offset' + axis], isIE10$1() ? html['offset' + axis] + computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')] + computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')] : 0);\n}\n\nfunction getWindowSizes() {\n  var body = window.document.body;\n  var html = window.document.documentElement;\n  var computedStyle = isIE10$1() && window.getComputedStyle(html);\n\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle)\n  };\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\nvar defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nfunction getClientRect(offsets) {\n  return _extends({}, offsets, {\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height\n  });\n}\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nfunction getBoundingClientRect(element) {\n  var rect = {};\n\n  // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n  if (isIE10$1()) {\n    try {\n      rect = element.getBoundingClientRect();\n      var scrollTop = getScroll(element, 'top');\n      var scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    } catch (err) {}\n  } else {\n    rect = element.getBoundingClientRect();\n  }\n\n  var result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top\n  };\n\n  // subtract scrollbar size from sizes\n  var sizes = element.nodeName === 'HTML' ? getWindowSizes() : {};\n  var width = sizes.width || element.clientWidth || result.right - result.left;\n  var height = sizes.height || element.clientHeight || result.bottom - result.top;\n\n  var horizScrollbar = element.offsetWidth - width;\n  var vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    var styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n\nfunction getOffsetRectRelativeToArbitraryNode(children, parent) {\n  var isIE10 = isIE10$1();\n  var isHTML = parent.nodeName === 'HTML';\n  var childrenRect = getBoundingClientRect(children);\n  var parentRect = getBoundingClientRect(parent);\n  var scrollParent = getScrollParent(children);\n\n  var styles = getStyleComputedProperty(parent);\n  var borderTopWidth = +styles.borderTopWidth.split('px')[0];\n  var borderLeftWidth = +styles.borderLeftWidth.split('px')[0];\n\n  var offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (!isIE10 && isHTML) {\n    var marginTop = +styles.marginTop.split('px')[0];\n    var marginLeft = +styles.marginLeft.split('px')[0];\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (isIE10 ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n\nfunction getViewportOffsetRectRelativeToArtbitraryNode(element) {\n  var html = window.document.documentElement;\n  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  var width = Math.max(html.clientWidth, window.innerWidth || 0);\n  var height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  var scrollTop = getScroll(html);\n  var scrollLeft = getScroll(html, 'left');\n\n  var offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width: width,\n    height: height\n  };\n\n  return getClientRect(offset);\n}\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\nfunction isFixed(element) {\n  var nodeName = element.nodeName;\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n  return isFixed(getParentNode(element));\n}\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @returns {Object} Coordinates of the boundaries\n */\nfunction getBoundaries(popper, reference, padding, boundariesElement) {\n  // NOTE: 1 DOM access here\n  var boundaries = { top: 0, left: 0 };\n  var offsetParent = findCommonOffsetParent(popper, reference);\n\n  // Handle viewport case\n  if (boundariesElement === 'viewport') {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent);\n  } else {\n    // Handle other cases based on DOM element used as boundaries\n    var boundariesNode = void 0;\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(popper));\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = window.document.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = window.document.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent);\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      var _getWindowSizes = getWindowSizes(),\n          height = _getWindowSizes.height,\n          width = _getWindowSizes.width;\n\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  boundaries.left += padding;\n  boundaries.top += padding;\n  boundaries.right -= padding;\n  boundaries.bottom -= padding;\n\n  return boundaries;\n}\n\nfunction getArea(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {\n  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);\n\n  var rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height\n    }\n  };\n\n  var sortedAreas = Object.keys(rects).map(function (key) {\n    return _extends({\n      key: key\n    }, rects[key], {\n      area: getArea(rects[key])\n    });\n  }).sort(function (a, b) {\n    return b.area - a.area;\n  });\n\n  var filteredAreas = sortedAreas.filter(function (_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height;\n    return width >= popper.clientWidth && height >= popper.clientHeight;\n  });\n\n  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;\n\n  var variation = placement.split('-')[1];\n\n  return computedPlacement + (variation ? '-' + variation : '');\n}\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nfunction getReferenceOffsets(state, popper, reference) {\n  var commonOffsetParent = findCommonOffsetParent(popper, reference);\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent);\n}\n\n/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nfunction getOuterSizes(element) {\n  var styles = window.getComputedStyle(element);\n  var x = parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);\n  var y = parseFloat(styles.marginLeft) + parseFloat(styles.marginRight);\n  var result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x\n  };\n  return result;\n}\n\n/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nfunction getOppositePlacement(placement) {\n  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nfunction getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0];\n\n  // Get popper node sizes\n  var popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  var popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  var mainSide = isHoriz ? 'top' : 'left';\n  var secondarySide = isHoriz ? 'left' : 'top';\n  var measurement = isHoriz ? 'height' : 'width';\n  var secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n\n/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(function (cur) {\n      return cur[prop] === value;\n    });\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn't supported\n  var match = find(arr, function (obj) {\n    return obj[prop] === value;\n  });\n  return arr.indexOf(match);\n}\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nfunction runModifiers(modifiers, data, ends) {\n  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n  modifiersToRun.forEach(function (modifier) {\n    if (modifier.function) {\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n    var fn = modifier.function || modifier.fn;\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nfunction update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  var data = {\n    instance: this,\n    styles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {}\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);\n  data.offsets.popper.position = 'absolute';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n\n/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nfunction isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(function (_ref) {\n    var name = _ref.name,\n        enabled = _ref.enabled;\n    return enabled && name === modifierName;\n  });\n}\n\n/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\nfunction getSupportedPropertyName(property) {\n  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (var i = 0; i < prefixes.length - 1; i++) {\n    var prefix = prefixes[i];\n    var toCheck = prefix ? '' + prefix + upperProp : property;\n    if (typeof window.document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n\n/**\n * Destroy the popper\n * @method\n * @memberof Popper\n */\nfunction destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.left = '';\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicity asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  var isBody = scrollParent.nodeName === 'BODY';\n  var target = isBody ? window : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction setupEventListeners(reference, options, state, updateBound) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  window.addEventListener('resize', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  var scrollElement = getScrollParent(reference);\n  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nfunction enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);\n  }\n}\n\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  window.removeEventListener('resize', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(function (target) {\n    target.removeEventListener('scroll', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger onUpdate callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nfunction disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    window.cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n\n/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nfunction isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setStyles(element, styles) {\n  Object.keys(styles).forEach(function (prop) {\n    var unit = '';\n    // add unit if the value is numeric and is one of the following\n    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {\n      unit = 'px';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n\n/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function (prop) {\n    var value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nfunction applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if the arrow style has been computed, apply the arrow style\n  if (data.offsets.arrow) {\n    setStyles(data.arrowElement, data.offsets.arrow);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper.\n * @param {Object} options - Popper.js options\n */\nfunction applyStyleOnLoad(reference, popper, options, modifierOptions, state) {\n  // compute reference element offsets\n  var referenceOffsets = getReferenceOffsets(state, popper, reference);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);\n\n  popper.setAttribute('x-placement', placement);\n\n  // Apply `position` to popper before anything else because\n  // without the position applied we can't guarantee correct computations\n  setStyles(popper, { position: 'absolute' });\n\n  return options;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeStyle(data, options) {\n  var x = options.x,\n      y = options.y;\n  var popper = data.offsets.popper;\n\n  // Remove this legacy support in Popper.js v2\n\n  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'applyStyle';\n  }).gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');\n  }\n  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;\n\n  var offsetParent = getOffsetParent(data.instance.popper);\n  var offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  var styles = {\n    position: popper.position\n  };\n\n  // floor sides to avoid blurry text\n  var offsets = {\n    left: Math.floor(popper.left),\n    top: Math.floor(popper.top),\n    bottom: Math.floor(popper.bottom),\n    right: Math.floor(popper.right)\n  };\n\n  var sideA = x === 'bottom' ? 'top' : 'bottom';\n  var sideB = y === 'right' ? 'left' : 'right';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  var prefixedProperty = getSupportedPropertyName('transform');\n\n  // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  var left = void 0,\n      top = void 0;\n  if (sideA === 'bottom') {\n    top = -offsetParentRect.height + offsets.bottom;\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === 'right') {\n    left = -offsetParentRect.width + offsets.right;\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    var invertTop = sideA === 'bottom' ? -1 : 1;\n    var invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = sideA + ', ' + sideB;\n  }\n\n  // Attributes\n  var attributes = {\n    'x-placement': data.placement\n  };\n\n  // Update attributes and styles of `data`\n  data.attributes = _extends({}, attributes, data.attributes);\n  data.styles = _extends({}, styles, data.styles);\n\n  return data;\n}\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nfunction isModifierRequired(modifiers, requestingName, requestedName) {\n  var requesting = find(modifiers, function (_ref) {\n    var name = _ref.name;\n    return name === requestingName;\n  });\n\n  var isRequired = !!requesting && modifiers.some(function (modifier) {\n    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;\n  });\n\n  if (!isRequired) {\n    var _requesting = '`' + requestingName + '`';\n    var requested = '`' + requestedName + '`';\n    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');\n  }\n  return isRequired;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction arrow(data, options) {\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  var arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it's a CSS selector\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don't run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn('WARNING: `arrow.element` must be child of its popper element!');\n      return data;\n    }\n  }\n\n  var placement = data.placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n  var len = isVertical ? 'height' : 'width';\n  var side = isVertical ? 'top' : 'left';\n  var altSide = isVertical ? 'left' : 'top';\n  var opSide = isVertical ? 'bottom' : 'right';\n  var arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its reference have enough pixels in conjuction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];\n  }\n\n  // compute center of the popper\n  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  var sideValue = center - getClientRect(data.offsets.popper)[side];\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = {};\n  data.offsets.arrow[side] = Math.round(sideValue);\n  data.offsets.arrow[altSide] = ''; // make sure to unset any eventual altSide value from the DOM node\n\n  return data;\n}\n\n/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nfunction getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n  return variation;\n}\n\n/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-right` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nvar placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];\n\n// Get rid of `auto` `auto-start` and `auto-end`\nvar validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nfunction clockwise(placement) {\n  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var index = validPlacements.indexOf(placement);\n  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n\nvar BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise'\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement);\n\n  var placement = data.placement.split('-')[0];\n  var placementOpposite = getOppositePlacement(placement);\n  var variation = data.placement.split('-')[1] || '';\n\n  var flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach(function (step, index) {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    var popperOffsets = data.offsets.popper;\n    var refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    var floor = Math.floor;\n    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);\n\n    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;\n\n    // flip the variation if required\n    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n    var flippedVariation = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : '');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));\n\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction keepTogether(data) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var placement = data.placement.split('-')[0];\n  var floor = Math.floor;\n  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  var side = isVertical ? 'right' : 'bottom';\n  var opSide = isVertical ? 'left' : 'top';\n  var measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nfunction toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  var split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  var value = +split[1];\n  var unit = split[2];\n\n  // If it's not a number it's an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    var element = void 0;\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    var rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    var size = void 0;\n    if (unit === 'vh') {\n      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n    } else {\n      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nfunction parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {\n  var offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  var fragments = offset.split(/(\\+|\\-)/).map(function (frag) {\n    return frag.trim();\n  });\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  var divider = fragments.indexOf(find(fragments, function (frag) {\n    return frag.search(/,|\\s/) !== -1;\n  }));\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  var splitRegex = /\\s*,\\s*|\\s+/;\n  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map(function (op, index) {\n    // Most of the units rely on the orientation of the popper\n    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';\n    var mergeWithPrevious = false;\n    return op\n    // This aggregates any `+` or `-` sign that aren't considered operators\n    // e.g.: 10 + +5 => [10, +, +5]\n    .reduce(function (a, b) {\n      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n        a[a.length - 1] = b;\n        mergeWithPrevious = true;\n        return a;\n      } else if (mergeWithPrevious) {\n        a[a.length - 1] += b;\n        mergeWithPrevious = false;\n        return a;\n      } else {\n        return a.concat(b);\n      }\n    }, [])\n    // Here we convert the string values into number values (in px)\n    .map(function (str) {\n      return toValue(str, measurement, popperOffsets, referenceOffsets);\n    });\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach(function (op, index) {\n    op.forEach(function (frag, index2) {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nfunction offset(data, _ref) {\n  var offset = _ref.offset;\n  var placement = data.placement,\n      _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var basePlacement = placement.split('-')[0];\n\n  var offsets = void 0;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction preventOverflow(data, options) {\n  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement);\n  options.boundaries = boundaries;\n\n  var order = options.priority;\n  var popper = data.offsets.popper;\n\n  var check = {\n    primary: function primary(placement) {\n      var value = popper[placement];\n      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return defineProperty({}, placement, value);\n    },\n    secondary: function secondary(placement) {\n      var mainSide = placement === 'right' ? 'left' : 'top';\n      var value = popper[mainSide];\n      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {\n        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));\n      }\n      return defineProperty({}, mainSide, value);\n    }\n  };\n\n  order.forEach(function (placement) {\n    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    popper = _extends({}, popper, check[side](placement));\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction shift(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var shiftvariation = placement.split('-')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    var _data$offsets = data.offsets,\n        reference = _data$offsets.reference,\n        popper = _data$offsets.popper;\n\n    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    var side = isVertical ? 'left' : 'top';\n    var measurement = isVertical ? 'width' : 'height';\n\n    var shiftOffsets = {\n      start: defineProperty({}, side, reference[side]),\n      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])\n    };\n\n    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  var refRect = data.offsets.reference;\n  var bound = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'preventOverflow';\n  }).boundaries;\n\n  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction inner(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? 'left' : 'top'] = reference[placement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nvar modifiers = {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unitless, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the height.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * An scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper this makes sure the popper has always a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier, can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent'\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near eachothers\n   * without leaving any gap between the two. Expecially useful when the arrow is\n   * enabled and you want to assure it to point to its reference element.\n   * It cares only about the first axis, you can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjuction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]'\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations).\n     */\n    behavior: 'flip',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position,\n     * the popper will never be placed outside of the defined boundaries\n     * (except if keepTogether is enabled)\n     */\n    boundariesElement: 'viewport'\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3d transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties.\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right'\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define you own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3d transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties.\n     */\n    gpuAcceleration: undefined\n  }\n};\n\n/**\n * The `dataObject` is an object containing all the informations used by Popper.js\n * this object get passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper.\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper, it expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements.\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overriden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass as 3rd argument an object with the same\n * structure of this object, example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nvar Defaults = {\n  /**\n   * Popper's placement\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Whether events (resize, scroll) are initially enabled\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: function onCreate() {},\n\n  /**\n   * Callback called when the popper is updated, this callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: function onUpdate() {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js\n   * @prop {modifiers}\n   */\n  modifiers: modifiers\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n\n// Utils\n// Methods\nvar Popper = function () {\n  /**\n   * Create a new Popper.js instance\n   * @class Popper\n   * @param {HTMLElement|referenceObject} reference - The reference element used to position the popper\n   * @param {HTMLElement} popper - The HTML element used as popper.\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  function Popper(reference, popper) {\n    var _this = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    classCallCheck(this, Popper);\n\n    this.scheduleUpdate = function () {\n      return requestAnimationFrame(_this.update);\n    };\n\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = _extends({}, Popper.Defaults, options);\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: []\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference.jquery ? reference[0] : reference;\n    this.popper = popper.jquery ? popper[0] : popper;\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {\n      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});\n    });\n\n    // Refactoring modifiers' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {\n      return _extends({\n        name: name\n      }, _this.options.modifiers[name]);\n    })\n    // sort the modifiers by order\n    .sort(function (a, b) {\n      return a.order - b.order;\n    });\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(function (modifierOptions) {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    var eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n\n\n  createClass(Popper, [{\n    key: 'update',\n    value: function update$$1() {\n      return update.call(this);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy$$1() {\n      return destroy.call(this);\n    }\n  }, {\n    key: 'enableEventListeners',\n    value: function enableEventListeners$$1() {\n      return enableEventListeners.call(this);\n    }\n  }, {\n    key: 'disableEventListeners',\n    value: function disableEventListeners$$1() {\n      return disableEventListeners.call(this);\n    }\n\n    /**\n     * Schedule an update, it will run on the next UI update available\n     * @method scheduleUpdate\n     * @memberof Popper\n     */\n\n\n    /**\n     * Collection of utilities useful when writing custom modifiers.\n     * Starting from version 1.7, this method is available only if you\n     * include `popper-utils.js` before `popper.js`.\n     *\n     * **DEPRECATION**: This way to access PopperUtils is deprecated\n     * and will be removed in v2! Use the PopperUtils module directly instead.\n     * Due to the high instability of the methods contained in Utils, we can't\n     * guarantee them to follow semver. Use them at your own risk!\n     * @static\n     * @private\n     * @type {Object}\n     * @deprecated since version 1.8\n     * @member Utils\n     * @memberof Popper\n     */\n\n  }]);\n  return Popper;\n}();\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n\n\nPopper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;\nPopper.placements = placements;\nPopper.Defaults = Defaults;\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Popper);\n//# sourceMappingURL=popper.js.map\n\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(6)))\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// guideme-bundle.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 6c3687e8e60055ad731c","// import styles from './guideme.css'\n// import themeStyles from './guideme-theme.css'\n// import Popper from 'popper.js';\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global.GuideMe = factory());\n}(this, (function () { 'use strict';\n\n    var $ = window && window.jQuery;\n\n    // @see https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    if (!Object.assign) {\n        Object.defineProperty(Object, 'assign', {\n            enumerable: false,\n            configurable: true,\n            writable: true,\n            value: function(target, firstSource) {\n                'use strict';\n                if (target === undefined || target === null) {\n                    throw new TypeError('Cannot convert first argument to object');\n                }\n\n                var to = Object(target);\n                for (var i = 1; i < arguments.length; i++) {\n                    var nextSource = arguments[i];\n                    if (nextSource === undefined || nextSource === null) {\n                        continue;\n                    }\n                    nextSource = Object(nextSource);\n\n                    var keysArray = Object.keys(Object(nextSource));\n                    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {\n                        var nextKey = keysArray[nextIndex];\n                        var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n                        if (desc !== undefined && desc.enumerable) {\n                            to[nextKey] = nextSource[nextKey];\n                        }\n                    }\n                }\n                return to;\n            }\n        });\n    }\n\n    function parseElemnt(element, defaultElement, fallToDefault) {\n        if (!element) {\n            return defaultElement;\n        } else if (element instanceof HTMLElement) {\n            return element;\n        } else if (element instanceof NodeList) {\n            return element[0];\n        } else if (typeof element == 'string') {\n            return document.querySelector(element);\n        } else if ($ && element.jquery) {\n            return element.get(0);\n        } else if (fallToDefault) {\n            return defaultElement;\n        } else {\n            return null;\n        }\n    }\n\n    // ritorna null o un array di elementi\n    function parseSelector(selector) {\n        if (!selector) {\n            return null;\n        } else if (selector instanceof HTMLElement) {\n            return [selector];\n        } else if (selector instanceof NodeList) {\n            return selector;\n        } else if (typeof selector == 'string') {\n            return document.querySelectorAll(selector);\n        } else if ($ && selector.jquery) {\n            return selector.get();\n        } else {\n            return null;\n        }\n    }\n\n    function getBodySize() {\n        var w = document.body.clientWidth,\n            h = document.body.clientHeight;\n        return { \"width\": w, \"height\": h };\n    }\n\n    function getWindowSize() {\n        var e = document.documentElement,\n            g = document.getElementsByTagName('body')[0],\n            w = window.innerWidth || e.clientWidth || g.clientWidth,\n            h = window.innerHeight || e.clientHeight || g.clientHeight;\n        return { \"width\": w, \"height\": h };\n    }\n\n    function createPopper(elDialog, stepTarget, cb) {\n        return new Popper(stepTarget, elDialog, {\n            \"placement\": \"bottom-start\",\n            \"onCreate\": function(dataObject) {\n                // se è posizionato in centro nascondo la freccia\n                elDialog.classList.toggle('guideme-center',\n                    stepTarget.guidemeCenter === true);\n                // scroll automatico perché il target sia sempre visibile\n                //  non uso elDialog perché il suo posizionamento può essere ritardato da Popper\n                //  e in ogni caso potrebbe non essere visibile il target\n                if (stepTarget.scrollIntoView) {\n                    // ritardo di un poco perché su chrome (e forse su altri) \n                    //  lo scroll al primo step non funziona\n                    setTimeout(function() {\n                        stepTarget.scrollIntoView(false); \n                    }, 100);\n                }\n                cb && cb(elDialog, stepTarget, this);\n            }\n        });\n    }\n\n    function nvl(text, def) {\n        return !text || text.length === 0 ? def : text;\n    }\n\n    function resolveFunctionOrValue(fnOrVal, _this) {\n        if (typeof fnOrVal == 'function' || false) {\n            return fnOrVal.apply(_this, Array.prototype.slice.call(arguments, 2));\n        } else {\n            return fnOrVal;\n        }\n    }\n\n    // ritorna obj se del tipo previsto, oppure scatena un errore\n    function ofTypeOrThrow(obj, type, error) {\n        if (typeof obj == type || false) {\n            return obj;\n        } else {\n            throw error || 'Invalid type: must be a ' + type;\n        }\n    }\n\n    function stepComparer(stepA, stepB) {\n        if (isNaN(stepB.order)) return -1;\n        if (isNaN(stepA.order)) return 1;\n        return (+stepA.order || 0) - (+stepB.order || 0);\n    }\n\n    function elementToStep(element) {\n        return {\n            \"target\": element,\n            // se il valore dell'attributo data-guideme è vuoto uso title\n            \"content\": nvl(element.getAttribute('data-guideme'),\n                element.title),\n            \"order\": +element.getAttribute('data-guideme-step')\n        };\n    }\n\n    function stringToStep(value) {\n        return {\n            \"content\": nvl(value, '')\n        };\n    }\n\n    function normalizeStep(step, index) {\n        if (isNaN(step.order)) {\n            step.order = index;\n        }\n        return step;\n    }\n\n    // elemento di riferimento per posizionare Popper al centro dello schermo\n    function getPopperRererenceCenter(element) {\n        var modWidth = -element.clientWidth / 2,\n            modHeight = -element.clientHeight / 2;\n        return {\n            \"guidemeCenter\": true,\n            \"clientWidth\": 1,\n            \"clientHeight\": 1,\n            \"getBoundingClientRect\": function() {\n                var size = getWindowSize();\n                return {\n                    \"bottom\": size.height / 2 + modHeight,\n                    \"height\": 1,\n                    \"left\": size.width / 2 + modWidth,\n                    \"right\": size.width / 2 + modWidth,\n                    \"top\": size.height / 2 + modHeight,\n                    \"width\": 1\n                };\n            }\n        }\n    }\n\n    var defaultOptions = {\n        attachTo: null,\n        classes: null,\n        title: null,\n        destroyOnDone: false,\n        allowKeyboardNavigation: true,\n        showOverlay: true,\n        overlayClickAction: 'done',\n        buttons: [\n            { \"text\": \"done\", \"action\": \"done\" },\n            { \"text\": \"prev\", \"action\": \"prev\" },\n            { \"text\": \"next\", \"action\": \"next\" }\n        ]\n    };\n\n    var elDialogHtml = '<div x-arrow></div><div class=\"guideme-title\"></div><div class=\"guideme-body\"></div><div class=\"guideme-footer\"></div>';\n\n    /**\n     * Crea una guida.\n     * GuideMe().from('body').start();\n     *\n     * @param      {Object}  options  opzioni\n     * @return     {Object}  ritorna una istanza di guideme\n     */\n    function GuideMe(options) {\n        var elBody = document.querySelector('body'),\n            elOverloay, elDialog, elDialogTitle, elDialogBody, elDialogFooter,\n            stepList = [],\n            popper,\n            curStepIndex,\n            instance;\n\n        var onStep, onDone;\n\n        options = Object.assign({}, defaultOptions, options);\n        options.attachTo = parseElemnt(options.attachTo, elBody, true);\n        options.attachTo.classList.add('guideme');\n\n        // creo il div per mascherare la pagina\n        if (options.showOverlay) {\n            elOverloay = document.createElement('div');\n            elOverloay.innerHTML = '&nbsp;';\n            elOverloay.className = 'guideme-overlay ' + nvl(options.classes, '');\n            elOverloay.onclick = function() {\n                performAction((options.overlayClickAction || '').toString().toUpperCase());\n            }\n            options.attachTo.appendChild(elOverloay);\n        }\n\n        // creo il dialog\n        elDialog = document.createElement('div');\n        elDialog.innerHTML = elDialogHtml;\n        elDialog.className = 'guideme-dialog';\n        if (options.classes) {\n            elDialog.className += ' ' + nvl(options.classes, '');\n        }\n        elDialogTitle = elDialog.querySelector('.guideme-title');\n        elDialogBody = elDialog.querySelector('.guideme-body');\n        elDialogFooter = elDialog.querySelector('.guideme-footer');\n        options.buttons.map(function(btn) {\n            var elButton = document.createElement('button');\n            elButton.className = 'guideme-button';\n            elButton.innerHTML = btn.text;\n            elButton.setAttribute('data-action', btn.action);\n            elButton.onclick = function() {\n                performAction((btn.action || '').toString().toUpperCase());\n            };\n            return elButton;\n        }).forEach(function(element) {\n            elDialogFooter.appendChild(element);\n        });\n        options.attachTo.appendChild(elDialog);\n\n        /// funzioni interne ///\n\n        function onKeyDown(event) {\n            event.preventDefault();\n            event.stopPropagation();\n            switch (event.keyCode || event.which) {\n                case 13: // enter\n                case 39: // arraow right\n                    performAction('NEXT');\n                    break;\n                case 8: // back\n                case 37: // arrow left\n                    performAction('PREV');\n                    break;\n                case 27: // esc\n                    performAction('DONE');\n                    break;\n            }\n        }\n\n        function performAction(action) {\n            switch (action) {\n                case 'NEXT':\n                    showStep((+curStepIndex || 0) + 1);\n                    break;\n                case 'PREV':\n                    showStep((+curStepIndex || 0) - 1);\n                    break;\n                case 'DONE':\n                    done();\n                    break;\n            }\n        }\n\n        function showStep(index) {\n            if (index < 0) return;\n            // pulisco il tag dello step precedente\n            if (!isNaN(curStepIndex)) {\n                cleanStepElement(+curStepIndex);\n            }\n            // se non ci sono più step da mostrare termino la guida\n            if (index >= stepList.length) {\n                done();\n                return;\n            }\n\n            curStepIndex = index;\n\n            var step = stepList[index];\n            elDialogTitle.innerHTML = nvl(resolveFunctionOrValue(options.title, instance, index, step), '');\n            elDialogBody.innerHTML = nvl(resolveFunctionOrValue(step.content, instance, index, step), '');\n            elDialog.classList.toggle('guideme-start', index === 0);\n            elDialog.classList.toggle('guideme-end', index === stepList.length - 1);\n            if (step.target) {\n                step.target.classList.add('guideme-step-target');\n                popper && popper.destroy();\n                // posiziono il dialogo rispetto al tag di riferimento\n                popper = createPopper(elDialog, step.target, onStep);\n            } else {\n                popper && popper.destroy();\n                // posiziono al centro dello schermo\n                popper = createPopper(elDialog, getPopperRererenceCenter(elDialog), onStep);\n            }\n        }\n\n        function cleanStepElement(index) {\n            if (stepList[index].target) {\n                stepList[index].target.classList.remove('guideme-step-target');\n            }\n        }\n\n        function setupEvents() {\n            // gestisco gli eventi per la navigazione\n            if (options.allowKeyboardNavigation) {\n                window.addEventListener('keydown', onKeyDown);\n            }\n        }\n\n        function cleanEvents() {\n            if (options.allowKeyboardNavigation) {\n                window.removeEventListener('keydown', onKeyDown);\n            }\n        }\n\n        function createOnStep(cb) {\n            return function(target, stepTarget, popper) {\n                cb(stepList[curStepIndex], curStepIndex, target, stepTarget, popper);\n            };\n        }\n\n        function createOnDone(cb) {\n            return function() {\n                // richiamo cb indicando se gli step sono finiti o se la sequenza è stata interrotta\n                cb(curStepIndex === stepList.length - 1);\n            }\n        }\n\n        function done() {\n            cleanEvents();\n            if (!isNaN(curStepIndex)) {\n                cleanStepElement(+curStepIndex);\n            }\n            options.attachTo.classList.remove('guideme-show');\n            popper && popper.destroy();\n            onDone && onDone();\n            if (options.destroyOnDone) {\n                destroy();\n            }\n        }\n\n        function destroy() {\n            if (elOverloay) {\n                options.attachTo.removeChild(elOverloay);\n            }\n            options.attachTo.removeChild(elDialog);\n            options.attachTo.classList.remove('guideme', 'guideme-show');\n            stepList = elBody = elOverloay = elDialog =\n                elDialogTitle = elDialogBody = elDialogFooter =\n                null;\n        }\n\n        // creo l'istanza da ritornare con la funzione\n        instance = {\n            /**\n             * Individua gli elementi con l'attributo [data-guideme] e li aggiunge come step.\n             * Vengono considerati gli elementi stessi individuati da \"from\" che il loro contenuto.\n             *\n             * @param      {HTMLElement, NodeList, selector, jQuery}  selector  uno o più elementi a partire dai quali creare gli step\n             * @return     {Object}  this\n             */\n            from: function(selector) {\n                var els = parseSelector(selector),\n                    elStepList;\n                // console.log(selector, els); \n                if (els) {\n                    for (var ii = 0; ii < els.length; ii++) {\n                        // se l'elemento è [data-guideme] lo aggiungo\n                        if (els[ii].hasAttribute('data-guideme')) {\n                            stepList.push(normalizeStep(elementToStep(els[ii]), stepList.length));\n                        }\n                        // cerco al suo interno tutti gli elementi con [data-guideme]\n                        elStepList = els[ii].querySelectorAll('[data-guideme]');\n                        for (var jj = 0; jj < elStepList.length; jj++) {\n                            stepList.push(normalizeStep(elementToStep(elStepList[jj]), stepList.length));\n                        }\n                    }\n                }\n                return this;\n            },\n            /**\n             * Aggiunge uno step (tag con attributo [data-guideme]).\n             * Lo step può essere uno Step, una funzione che ritorna uno Step, \n             * o una stringa che diverrà il contenuto di uno Step senza elememnto.\n             *\n             * @param      {string|Object|Function}  step    lo step\n             * @return     {Object}  this\n             */\n            addStep: function(step) {\n                if (typeof step == 'string') {\n                    stepList.push(normalizeStep(stringToStep(step), stepList.length));\n                } else {\n                    stepList.push(normalizeStep(resolveFunctionOrValue(step, this), stepList.length));\n                }\n                return this;\n            },\n            start: function(initialStep) {\n                stepList.sort(stepComparer);\n                // console.log(stepList)\n                setupEvents();\n                showStep(+initialStep || 0)\n                options.attachTo.classList.add('guideme', 'guideme-show');\n                return this;\n            },\n            // exec: function(action) {\n            //     performAction((action || '').toString().toUpperCase())\n            //     return this;\n            // },\n            end: function() {\n                done();\n                return this;\n            },\n            destroy: function() {\n                done();\n                destroy();\n                return this;\n            },\n            /**\n             * Richiama la callback al cambio di step.\n             * All'interno della callback this si riferisce a questa istanza.\n             *\n             * @param      {Function}  cb      callback(step, index, target, stepTarget, popper)\n             * @return     {Object}    this\n             */\n            onStep: function(cb) {\n                if (!cb) {\n                    onStep = null;\n                } else {\n                    // creo una funzione che al suo interno richiama cb bindata a this\n                    onStep = createOnStep(ofTypeOrThrow(cb, 'function', 'cb must be a function').bind(this));\n                }\n                return this;\n            },\n            /**\n             * Richiama la callback al termine della sequenza, anche se interrotta.\n             * All'interno della callback this si riferisce a questa istanza.\n             *\n             * @param      {Function}  cb      callback(finished: boolean)\n             * @return     {Object}    this\n             */\n            onDone: function(cb) {\n                if (!cb) {\n                    onDone = null;\n                } else {\n                    // creo una funzione che al suo interno richiama cb bindata a this\n                    onDone = createOnDone(ofTypeOrThrow(cb, 'function', 'cb must be a function').bind(this));\n                }\n                return this;\n            },\n            stepAt: function(index) {\n                return stepList[+index];\n            }\n        };\n\n        // proprietà in sola lettura\n        Object.defineProperty(instance, 'stepCount', {\n            \"get\": function() {\n                return stepList.length;\n            }\n        });\n        Object.defineProperty(instance, 'stepIndex', {\n            \"get\": function() {\n                return curStepIndex;\n            }\n        });\n\n        return instance;\n    }\n\n    return GuideMe;\n})));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/guideme.js\n// module id = 0\n// module chunks = 0 1","import index from './index.html';\nimport styles from './guideme.css';\nimport themeStyles from './guideme-theme.css';\nimport Popper from 'popper.js';\nimport GuideMe from './guideme.js';\n\nwindow.Popper = Popper;\nwindow.GuideMe = GuideMe;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/guideme-bundle.js\n// module id = 1\n// module chunks = 0","/**!\n * @fileOverview Kickass library to create and place poppers near their reference elements.\n * @version 1.11.1\n * @license\n * Copyright (c) 2016 Federico Zivolo and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nvar nativeHints = ['native code', '[object MutationObserverConstructor]'];\n\n/**\n * Determine if a function is implemented natively (as opposed to a polyfill).\n * @method\n * @memberof Popper.Utils\n * @argument {Function | undefined} fn the function to check\n * @returns {Boolean}\n */\nvar isNative = (function (fn) {\n  return nativeHints.some(function (hint) {\n    return (fn || '').toString().indexOf(hint) > -1;\n  });\n});\n\nvar isBrowser = typeof window !== 'undefined';\nvar longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\nvar timeoutDuration = 0;\nfor (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n  if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n    timeoutDuration = 1;\n    break;\n  }\n}\n\nfunction microtaskDebounce(fn) {\n  var scheduled = false;\n  var i = 0;\n  var elem = document.createElement('span');\n\n  // MutationObserver provides a mechanism for scheduling microtasks, which\n  // are scheduled *before* the next task. This gives us a way to debounce\n  // a function but ensure it's called *before* the next paint.\n  var observer = new MutationObserver(function () {\n    fn();\n    scheduled = false;\n  });\n\n  observer.observe(elem, { attributes: true });\n\n  return function () {\n    if (!scheduled) {\n      scheduled = true;\n      elem.setAttribute('x-index', i);\n      i = i + 1; // don't use compund (+=) because it doesn't get optimized in V8\n    }\n  };\n}\n\nfunction taskDebounce(fn) {\n  var scheduled = false;\n  return function () {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(function () {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\n// It's common for MutationObserver polyfills to be seen in the wild, however\n// these rely on Mutation Events which only occur when an element is connected\n// to the DOM. The algorithm used in this module does not use a connected element,\n// and so we must ensure that a *native* MutationObserver is available.\nvar supportsNativeMutationObserver = isBrowser && isNative(window.MutationObserver);\n\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nvar debounce = supportsNativeMutationObserver ? microtaskDebounce : taskDebounce;\n\n/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nfunction isFunction(functionToCheck) {\n  var getType = {};\n  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n}\n\n/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nfunction getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  var css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n\n/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nfunction getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nfunction getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element || ['HTML', 'BODY', '#document'].indexOf(element.nodeName) !== -1) {\n    return window.document.body;\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n\n  var _getStyleComputedProp = getStyleComputedProperty(element),\n      overflow = _getStyleComputedProp.overflow,\n      overflowX = _getStyleComputedProp.overflowX,\n      overflowY = _getStyleComputedProp.overflowY;\n\n  if (/(auto|scroll)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nfunction getOffsetParent(element) {\n  // NOTE: 1 DOM access here\n  var offsetParent = element && element.offsetParent;\n  var nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return window.document.documentElement;\n  }\n\n  // .offsetParent will return the closest TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n  if (['TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n\nfunction isOffsetContainer(element) {\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY') {\n    return false;\n  }\n  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;\n}\n\n/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nfunction getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nfunction findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return window.document.documentElement;\n  }\n\n  // Here we make sure to give as \"start\" the element that comes first in the DOM\n  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;\n  var start = order ? element1 : element2;\n  var end = order ? element2 : element1;\n\n  // Get common ancestor container\n  var range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  var commonAncestorContainer = range.commonAncestorContainer;\n\n  // Both nodes are inside #document\n\n  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  var element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n\n/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nfunction getScroll(element) {\n  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';\n\n  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    var html = window.document.documentElement;\n    var scrollingElement = window.document.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nfunction includeScroll(rect, element) {\n  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var scrollTop = getScroll(element, 'top');\n  var scrollLeft = getScroll(element, 'left');\n  var modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n\n/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nfunction getBordersSize(styles, axis) {\n  var sideA = axis === 'x' ? 'Left' : 'Top';\n  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n  return +styles['border' + sideA + 'Width'].split('px')[0] + +styles['border' + sideB + 'Width'].split('px')[0];\n}\n\n/**\n * Tells if you are running Internet Explorer 10\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean} isIE10\n */\nvar isIE10 = undefined;\n\nvar isIE10$1 = function () {\n  if (isIE10 === undefined) {\n    isIE10 = navigator.appVersion.indexOf('MSIE 10') !== -1;\n  }\n  return isIE10;\n};\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(body['offset' + axis], html['client' + axis], html['offset' + axis], isIE10$1() ? html['offset' + axis] + computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')] + computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')] : 0);\n}\n\nfunction getWindowSizes() {\n  var body = window.document.body;\n  var html = window.document.documentElement;\n  var computedStyle = isIE10$1() && window.getComputedStyle(html);\n\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle)\n  };\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\nvar defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nfunction getClientRect(offsets) {\n  return _extends({}, offsets, {\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height\n  });\n}\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nfunction getBoundingClientRect(element) {\n  var rect = {};\n\n  // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n  if (isIE10$1()) {\n    try {\n      rect = element.getBoundingClientRect();\n      var scrollTop = getScroll(element, 'top');\n      var scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    } catch (err) {}\n  } else {\n    rect = element.getBoundingClientRect();\n  }\n\n  var result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top\n  };\n\n  // subtract scrollbar size from sizes\n  var sizes = element.nodeName === 'HTML' ? getWindowSizes() : {};\n  var width = sizes.width || element.clientWidth || result.right - result.left;\n  var height = sizes.height || element.clientHeight || result.bottom - result.top;\n\n  var horizScrollbar = element.offsetWidth - width;\n  var vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    var styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n\nfunction getOffsetRectRelativeToArbitraryNode(children, parent) {\n  var isIE10 = isIE10$1();\n  var isHTML = parent.nodeName === 'HTML';\n  var childrenRect = getBoundingClientRect(children);\n  var parentRect = getBoundingClientRect(parent);\n  var scrollParent = getScrollParent(children);\n\n  var styles = getStyleComputedProperty(parent);\n  var borderTopWidth = +styles.borderTopWidth.split('px')[0];\n  var borderLeftWidth = +styles.borderLeftWidth.split('px')[0];\n\n  var offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (!isIE10 && isHTML) {\n    var marginTop = +styles.marginTop.split('px')[0];\n    var marginLeft = +styles.marginLeft.split('px')[0];\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (isIE10 ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n\nfunction getViewportOffsetRectRelativeToArtbitraryNode(element) {\n  var html = window.document.documentElement;\n  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  var width = Math.max(html.clientWidth, window.innerWidth || 0);\n  var height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  var scrollTop = getScroll(html);\n  var scrollLeft = getScroll(html, 'left');\n\n  var offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width: width,\n    height: height\n  };\n\n  return getClientRect(offset);\n}\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\nfunction isFixed(element) {\n  var nodeName = element.nodeName;\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n  return isFixed(getParentNode(element));\n}\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @returns {Object} Coordinates of the boundaries\n */\nfunction getBoundaries(popper, reference, padding, boundariesElement) {\n  // NOTE: 1 DOM access here\n  var boundaries = { top: 0, left: 0 };\n  var offsetParent = findCommonOffsetParent(popper, reference);\n\n  // Handle viewport case\n  if (boundariesElement === 'viewport') {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent);\n  } else {\n    // Handle other cases based on DOM element used as boundaries\n    var boundariesNode = void 0;\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(popper));\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = window.document.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = window.document.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent);\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      var _getWindowSizes = getWindowSizes(),\n          height = _getWindowSizes.height,\n          width = _getWindowSizes.width;\n\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  boundaries.left += padding;\n  boundaries.top += padding;\n  boundaries.right -= padding;\n  boundaries.bottom -= padding;\n\n  return boundaries;\n}\n\nfunction getArea(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {\n  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);\n\n  var rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height\n    }\n  };\n\n  var sortedAreas = Object.keys(rects).map(function (key) {\n    return _extends({\n      key: key\n    }, rects[key], {\n      area: getArea(rects[key])\n    });\n  }).sort(function (a, b) {\n    return b.area - a.area;\n  });\n\n  var filteredAreas = sortedAreas.filter(function (_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height;\n    return width >= popper.clientWidth && height >= popper.clientHeight;\n  });\n\n  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;\n\n  var variation = placement.split('-')[1];\n\n  return computedPlacement + (variation ? '-' + variation : '');\n}\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nfunction getReferenceOffsets(state, popper, reference) {\n  var commonOffsetParent = findCommonOffsetParent(popper, reference);\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent);\n}\n\n/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nfunction getOuterSizes(element) {\n  var styles = window.getComputedStyle(element);\n  var x = parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);\n  var y = parseFloat(styles.marginLeft) + parseFloat(styles.marginRight);\n  var result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x\n  };\n  return result;\n}\n\n/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nfunction getOppositePlacement(placement) {\n  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nfunction getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0];\n\n  // Get popper node sizes\n  var popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  var popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  var mainSide = isHoriz ? 'top' : 'left';\n  var secondarySide = isHoriz ? 'left' : 'top';\n  var measurement = isHoriz ? 'height' : 'width';\n  var secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n\n/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(function (cur) {\n      return cur[prop] === value;\n    });\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn't supported\n  var match = find(arr, function (obj) {\n    return obj[prop] === value;\n  });\n  return arr.indexOf(match);\n}\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nfunction runModifiers(modifiers, data, ends) {\n  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n  modifiersToRun.forEach(function (modifier) {\n    if (modifier.function) {\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n    var fn = modifier.function || modifier.fn;\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nfunction update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  var data = {\n    instance: this,\n    styles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {}\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);\n  data.offsets.popper.position = 'absolute';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n\n/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nfunction isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(function (_ref) {\n    var name = _ref.name,\n        enabled = _ref.enabled;\n    return enabled && name === modifierName;\n  });\n}\n\n/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\nfunction getSupportedPropertyName(property) {\n  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (var i = 0; i < prefixes.length - 1; i++) {\n    var prefix = prefixes[i];\n    var toCheck = prefix ? '' + prefix + upperProp : property;\n    if (typeof window.document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n\n/**\n * Destroy the popper\n * @method\n * @memberof Popper\n */\nfunction destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.left = '';\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicity asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  var isBody = scrollParent.nodeName === 'BODY';\n  var target = isBody ? window : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction setupEventListeners(reference, options, state, updateBound) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  window.addEventListener('resize', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  var scrollElement = getScrollParent(reference);\n  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nfunction enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);\n  }\n}\n\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  window.removeEventListener('resize', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(function (target) {\n    target.removeEventListener('scroll', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger onUpdate callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nfunction disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    window.cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n\n/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nfunction isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setStyles(element, styles) {\n  Object.keys(styles).forEach(function (prop) {\n    var unit = '';\n    // add unit if the value is numeric and is one of the following\n    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {\n      unit = 'px';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n\n/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function (prop) {\n    var value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nfunction applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if the arrow style has been computed, apply the arrow style\n  if (data.offsets.arrow) {\n    setStyles(data.arrowElement, data.offsets.arrow);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper.\n * @param {Object} options - Popper.js options\n */\nfunction applyStyleOnLoad(reference, popper, options, modifierOptions, state) {\n  // compute reference element offsets\n  var referenceOffsets = getReferenceOffsets(state, popper, reference);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);\n\n  popper.setAttribute('x-placement', placement);\n\n  // Apply `position` to popper before anything else because\n  // without the position applied we can't guarantee correct computations\n  setStyles(popper, { position: 'absolute' });\n\n  return options;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeStyle(data, options) {\n  var x = options.x,\n      y = options.y;\n  var popper = data.offsets.popper;\n\n  // Remove this legacy support in Popper.js v2\n\n  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'applyStyle';\n  }).gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');\n  }\n  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;\n\n  var offsetParent = getOffsetParent(data.instance.popper);\n  var offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  var styles = {\n    position: popper.position\n  };\n\n  // floor sides to avoid blurry text\n  var offsets = {\n    left: Math.floor(popper.left),\n    top: Math.floor(popper.top),\n    bottom: Math.floor(popper.bottom),\n    right: Math.floor(popper.right)\n  };\n\n  var sideA = x === 'bottom' ? 'top' : 'bottom';\n  var sideB = y === 'right' ? 'left' : 'right';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  var prefixedProperty = getSupportedPropertyName('transform');\n\n  // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  var left = void 0,\n      top = void 0;\n  if (sideA === 'bottom') {\n    top = -offsetParentRect.height + offsets.bottom;\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === 'right') {\n    left = -offsetParentRect.width + offsets.right;\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    var invertTop = sideA === 'bottom' ? -1 : 1;\n    var invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = sideA + ', ' + sideB;\n  }\n\n  // Attributes\n  var attributes = {\n    'x-placement': data.placement\n  };\n\n  // Update attributes and styles of `data`\n  data.attributes = _extends({}, attributes, data.attributes);\n  data.styles = _extends({}, styles, data.styles);\n\n  return data;\n}\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nfunction isModifierRequired(modifiers, requestingName, requestedName) {\n  var requesting = find(modifiers, function (_ref) {\n    var name = _ref.name;\n    return name === requestingName;\n  });\n\n  var isRequired = !!requesting && modifiers.some(function (modifier) {\n    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;\n  });\n\n  if (!isRequired) {\n    var _requesting = '`' + requestingName + '`';\n    var requested = '`' + requestedName + '`';\n    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');\n  }\n  return isRequired;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction arrow(data, options) {\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  var arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it's a CSS selector\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don't run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn('WARNING: `arrow.element` must be child of its popper element!');\n      return data;\n    }\n  }\n\n  var placement = data.placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n  var len = isVertical ? 'height' : 'width';\n  var side = isVertical ? 'top' : 'left';\n  var altSide = isVertical ? 'left' : 'top';\n  var opSide = isVertical ? 'bottom' : 'right';\n  var arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its reference have enough pixels in conjuction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];\n  }\n\n  // compute center of the popper\n  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  var sideValue = center - getClientRect(data.offsets.popper)[side];\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = {};\n  data.offsets.arrow[side] = Math.round(sideValue);\n  data.offsets.arrow[altSide] = ''; // make sure to unset any eventual altSide value from the DOM node\n\n  return data;\n}\n\n/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nfunction getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n  return variation;\n}\n\n/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-right` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nvar placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];\n\n// Get rid of `auto` `auto-start` and `auto-end`\nvar validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nfunction clockwise(placement) {\n  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var index = validPlacements.indexOf(placement);\n  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n\nvar BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise'\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement);\n\n  var placement = data.placement.split('-')[0];\n  var placementOpposite = getOppositePlacement(placement);\n  var variation = data.placement.split('-')[1] || '';\n\n  var flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach(function (step, index) {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    var popperOffsets = data.offsets.popper;\n    var refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    var floor = Math.floor;\n    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);\n\n    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;\n\n    // flip the variation if required\n    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n    var flippedVariation = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : '');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));\n\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction keepTogether(data) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var placement = data.placement.split('-')[0];\n  var floor = Math.floor;\n  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  var side = isVertical ? 'right' : 'bottom';\n  var opSide = isVertical ? 'left' : 'top';\n  var measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nfunction toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  var split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  var value = +split[1];\n  var unit = split[2];\n\n  // If it's not a number it's an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    var element = void 0;\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    var rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    var size = void 0;\n    if (unit === 'vh') {\n      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n    } else {\n      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nfunction parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {\n  var offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  var fragments = offset.split(/(\\+|\\-)/).map(function (frag) {\n    return frag.trim();\n  });\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  var divider = fragments.indexOf(find(fragments, function (frag) {\n    return frag.search(/,|\\s/) !== -1;\n  }));\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  var splitRegex = /\\s*,\\s*|\\s+/;\n  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map(function (op, index) {\n    // Most of the units rely on the orientation of the popper\n    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';\n    var mergeWithPrevious = false;\n    return op\n    // This aggregates any `+` or `-` sign that aren't considered operators\n    // e.g.: 10 + +5 => [10, +, +5]\n    .reduce(function (a, b) {\n      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n        a[a.length - 1] = b;\n        mergeWithPrevious = true;\n        return a;\n      } else if (mergeWithPrevious) {\n        a[a.length - 1] += b;\n        mergeWithPrevious = false;\n        return a;\n      } else {\n        return a.concat(b);\n      }\n    }, [])\n    // Here we convert the string values into number values (in px)\n    .map(function (str) {\n      return toValue(str, measurement, popperOffsets, referenceOffsets);\n    });\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach(function (op, index) {\n    op.forEach(function (frag, index2) {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nfunction offset(data, _ref) {\n  var offset = _ref.offset;\n  var placement = data.placement,\n      _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var basePlacement = placement.split('-')[0];\n\n  var offsets = void 0;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction preventOverflow(data, options) {\n  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement);\n  options.boundaries = boundaries;\n\n  var order = options.priority;\n  var popper = data.offsets.popper;\n\n  var check = {\n    primary: function primary(placement) {\n      var value = popper[placement];\n      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return defineProperty({}, placement, value);\n    },\n    secondary: function secondary(placement) {\n      var mainSide = placement === 'right' ? 'left' : 'top';\n      var value = popper[mainSide];\n      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {\n        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));\n      }\n      return defineProperty({}, mainSide, value);\n    }\n  };\n\n  order.forEach(function (placement) {\n    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    popper = _extends({}, popper, check[side](placement));\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction shift(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var shiftvariation = placement.split('-')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    var _data$offsets = data.offsets,\n        reference = _data$offsets.reference,\n        popper = _data$offsets.popper;\n\n    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    var side = isVertical ? 'left' : 'top';\n    var measurement = isVertical ? 'width' : 'height';\n\n    var shiftOffsets = {\n      start: defineProperty({}, side, reference[side]),\n      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])\n    };\n\n    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  var refRect = data.offsets.reference;\n  var bound = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'preventOverflow';\n  }).boundaries;\n\n  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction inner(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? 'left' : 'top'] = reference[placement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nvar modifiers = {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unitless, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the height.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * An scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper this makes sure the popper has always a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier, can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent'\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near eachothers\n   * without leaving any gap between the two. Expecially useful when the arrow is\n   * enabled and you want to assure it to point to its reference element.\n   * It cares only about the first axis, you can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjuction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]'\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations).\n     */\n    behavior: 'flip',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position,\n     * the popper will never be placed outside of the defined boundaries\n     * (except if keepTogether is enabled)\n     */\n    boundariesElement: 'viewport'\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3d transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties.\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right'\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define you own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3d transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties.\n     */\n    gpuAcceleration: undefined\n  }\n};\n\n/**\n * The `dataObject` is an object containing all the informations used by Popper.js\n * this object get passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper.\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper, it expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements.\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overriden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass as 3rd argument an object with the same\n * structure of this object, example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nvar Defaults = {\n  /**\n   * Popper's placement\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Whether events (resize, scroll) are initially enabled\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: function onCreate() {},\n\n  /**\n   * Callback called when the popper is updated, this callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: function onUpdate() {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js\n   * @prop {modifiers}\n   */\n  modifiers: modifiers\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n\n// Utils\n// Methods\nvar Popper = function () {\n  /**\n   * Create a new Popper.js instance\n   * @class Popper\n   * @param {HTMLElement|referenceObject} reference - The reference element used to position the popper\n   * @param {HTMLElement} popper - The HTML element used as popper.\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  function Popper(reference, popper) {\n    var _this = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    classCallCheck(this, Popper);\n\n    this.scheduleUpdate = function () {\n      return requestAnimationFrame(_this.update);\n    };\n\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = _extends({}, Popper.Defaults, options);\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: []\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference.jquery ? reference[0] : reference;\n    this.popper = popper.jquery ? popper[0] : popper;\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {\n      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});\n    });\n\n    // Refactoring modifiers' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {\n      return _extends({\n        name: name\n      }, _this.options.modifiers[name]);\n    })\n    // sort the modifiers by order\n    .sort(function (a, b) {\n      return a.order - b.order;\n    });\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(function (modifierOptions) {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    var eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n\n\n  createClass(Popper, [{\n    key: 'update',\n    value: function update$$1() {\n      return update.call(this);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy$$1() {\n      return destroy.call(this);\n    }\n  }, {\n    key: 'enableEventListeners',\n    value: function enableEventListeners$$1() {\n      return enableEventListeners.call(this);\n    }\n  }, {\n    key: 'disableEventListeners',\n    value: function disableEventListeners$$1() {\n      return disableEventListeners.call(this);\n    }\n\n    /**\n     * Schedule an update, it will run on the next UI update available\n     * @method scheduleUpdate\n     * @memberof Popper\n     */\n\n\n    /**\n     * Collection of utilities useful when writing custom modifiers.\n     * Starting from version 1.7, this method is available only if you\n     * include `popper-utils.js` before `popper.js`.\n     *\n     * **DEPRECATION**: This way to access PopperUtils is deprecated\n     * and will be removed in v2! Use the PopperUtils module directly instead.\n     * Due to the high instability of the methods contained in Utils, we can't\n     * guarantee them to follow semver. Use them at your own risk!\n     * @static\n     * @private\n     * @type {Object}\n     * @deprecated since version 1.8\n     * @member Utils\n     * @memberof Popper\n     */\n\n  }]);\n  return Popper;\n}();\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n\n\nPopper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;\nPopper.placements = placements;\nPopper.Defaults = Defaults;\n\nexport default Popper;\n//# sourceMappingURL=popper.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/popper.js/dist/esm/popper.js\n// module id = 5\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}