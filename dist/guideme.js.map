{"version":3,"sources":["webpack:///guideme.js","webpack:///webpack/bootstrap 2b6742cf28c20400318a","webpack:///./guideme.js","webpack:///./node_modules/popper.js/dist/esm/popper.js","webpack:///(webpack)/buildin/global.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","value","__WEBPACK_IMPORTED_MODULE_0_popper_js__","window","$","parseElemnt","element","defaultElement","fallToDefault","HTMLElement","NodeList","document","querySelector","jquery","parseSelector","selector","querySelectorAll","getWindowSize","e","documentElement","g","getElementsByTagName","width","innerWidth","clientWidth","height","innerHeight","clientHeight","createPopper","stepTarget","placement","onCreate","dataObject","classList","toggle","guidemeCenter","scrollIntoView","nvl","text","def","length","resolveFunctionOrValue","valOrFn","apply","Array","slice","arguments","stepComparer","stepA","stepB","order","elementToStep","index","el","content","getAttribute","title","stringToStep","normalizeStep","step","getPopperRererenceCenter","modWidth","modHeight","getBoundingClientRect","size","bottom","left","right","top","GuideMe","options","onKeyUp","event","keyCode","which","performAction","action","showStep","previous","done","isNaN","cleanStepElement","stepList","elDialogTitle","innerHTML","this","elDialogBody","elDialog","add","popper","destroy","remove","setupEvents","allowKeyboardNavigation","addEventListener","cleanEvents","removeEventListener","attachTo","destroyOnDone","elOverloay","removeChild","elBody","elDialogFooter","assign","defaultOptions","showOverlay","createElement","className","classes","onclick","overlayClickAction","toString","toUpperCase","appendChild","elDialogHtml","buttons","map","btn","elButton","setAttribute","forEach","from","elStepList","els","ii","hasAttribute","push","jj","addStep","start","initialStep","sort","exec","end","writable","target","firstSource","undefined","TypeError","to","nextSource","keysArray","keys","nextIndex","len","nextKey","desc","getOwnPropertyDescriptor","jQuery","global","microtaskDebounce","fn","scheduled","elem","MutationObserver","observe","attributes","taskDebounce","setTimeout","timeoutDuration","isFunction","functionToCheck","getType","getStyleComputedProperty","nodeType","css","getComputedStyle","getParentNode","nodeName","parentNode","host","getScrollParent","indexOf","body","_getStyleComputedProp","overflow","overflowX","test","overflowY","getOffsetParent","offsetParent","isOffsetContainer","firstElementChild","getRoot","node","findCommonOffsetParent","element1","element2","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","range","createRange","setStart","setEnd","commonAncestorContainer","contains","element1root","getScroll","side","upperSide","html","scrollingElement","includeScroll","rect","subtract","scrollTop","scrollLeft","modifier","getBordersSize","styles","axis","sideA","sideB","split","getSize","computedStyle","Math","max","isIE10$1","getWindowSizes","getClientRect","offsets","_extends","err","result","sizes","horizScrollbar","offsetWidth","vertScrollbar","offsetHeight","getOffsetRectRelativeToArbitraryNode","children","parent","isIE10","isHTML","childrenRect","parentRect","scrollParent","borderTopWidth","borderLeftWidth","marginTop","marginLeft","getViewportOffsetRectRelativeToArtbitraryNode","relativeOffset","isFixed","getBoundaries","reference","padding","boundariesElement","boundaries","boundariesNode","_getWindowSizes","getArea","_ref","computeAutoPlacement","refRect","rects","sortedAreas","key","area","a","b","filteredAreas","filter","_ref2","computedPlacement","variation","getReferenceOffsets","state","getOuterSizes","x","parseFloat","marginBottom","y","marginRight","getOppositePlacement","hash","replace","matched","getPopperOffsets","referenceOffsets","popperRect","popperOffsets","isHoriz","mainSide","secondarySide","measurement","secondaryMeasurement","find","arr","check","findIndex","prop","cur","match","obj","runModifiers","modifiers","data","ends","function","console","warn","enabled","update","isDestroyed","instance","flipped","flip","originalPlacement","position","isCreated","onUpdate","isModifierEnabled","modifierName","some","getSupportedPropertyName","prefixes","upperProp","charAt","prefix","toCheck","style","removeAttribute","disableEventListeners","removeOnDestroy","attachToScrollParents","callback","scrollParents","isBody","passive","setupEventListeners","updateBound","scrollElement","eventsEnabled","enableEventListeners","scheduleUpdate","removeEventListeners","cancelAnimationFrame","isNumeric","isFinite","setStyles","unit","setAttributes","applyStyle","arrow","arrowElement","applyStyleOnLoad","modifierOptions","computeStyle","legacyGpuAccelerationOption","gpuAcceleration","offsetParentRect","floor","prefixedProperty","willChange","invertTop","invertLeft","x-placement","isModifierRequired","requestingName","requestedName","requesting","isRequired","_requesting","requested","_data$offsets","isVertical","altSide","opSide","arrowElementSize","center","sideValue","min","round","getOppositeVariation","clockwise","counter","validPlacements","concat","reverse","placementOpposite","flipOrder","behavior","BEHAVIORS","FLIP","CLOCKWISE","COUNTERCLOCKWISE","refOffsets","overlapsRef","overflowsLeft","overflowsRight","overflowsTop","overflowsBottom","overflowsBoundaries","flippedVariation","flipVariations","keepTogether","toValue","str","parseOffset","offset","basePlacement","useHeight","fragments","frag","trim","divider","search","splitRegex","ops","op","mergeWithPrevious","reduce","index2","preventOverflow","priority","primary","escapeWithReference","secondary","shift","shiftvariation","shiftOffsets","hide","bound","inner","subtractLength","nativeHints","isBrowser","longerTimeoutBrowsers","navigator","userAgent","supportsNativeMutationObserver","hint","debounce","appVersion","classCallCheck","Constructor","createClass","defineProperties","props","descriptor","protoProps","staticProps","source","placements","onLoad","Defaults","Popper","_this","requestAnimationFrame","bind","Utils","PopperUtils","Function","eval"],"mappings":"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","file":"guideme.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_popper_js__ = __webpack_require__(1);\n\n\n;\n(function(window, $) {\n    \"use strict\";\n\n    // @see https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    if (!Object.assign) {\n        Object.defineProperty(Object, 'assign', {\n            enumerable: false,\n            configurable: true,\n            writable: true,\n            value: function(target, firstSource) {\n                'use strict';\n                if (target === undefined || target === null) {\n                    throw new TypeError('Cannot convert first argument to object');\n                }\n\n                var to = Object(target);\n                for (var i = 1; i < arguments.length; i++) {\n                    var nextSource = arguments[i];\n                    if (nextSource === undefined || nextSource === null) {\n                        continue;\n                    }\n                    nextSource = Object(nextSource);\n\n                    var keysArray = Object.keys(Object(nextSource));\n                    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {\n                        var nextKey = keysArray[nextIndex];\n                        var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n                        if (desc !== undefined && desc.enumerable) {\n                            to[nextKey] = nextSource[nextKey];\n                        }\n                    }\n                }\n                return to;\n            }\n        });\n    }\n\n    function parseElemnt(element, defaultElement, fallToDefault) {\n        if (!element) {\n            return defaultElement;\n        } else if (element instanceof HTMLElement) {\n            return element;\n        } else if (element instanceof NodeList) {\n            return element[0];\n        } else if (typeof element == 'string') {\n            return document.querySelector(element);\n        } else if ($ && element.jquery) {\n            return element.get(0);\n        } else if (fallToDefault) {\n            return defaultElement;\n        } else {\n            return null;\n        }\n    }\n\n    // ritorna null o un array di elementi\n    function parseSelector(selector) {\n        if (!selector) {\n            return null;\n        } else if (selector instanceof HTMLElement) {\n            return [selector];\n        } else if (selector instanceof NodeList) {\n            return selector;\n        } else if (typeof selector == 'string') {\n            return document.querySelectorAll(selector);\n        } else if ($ && selector.jquery) {\n            return selector.get();\n        } else {\n            return null;\n        }\n    }\n\n    function getBodySize() {\n        var w = document.body.clientWidth,\n            h = document.body.clientHeight;\n        return { \"width\": w, \"height\": h };\n    }\n\n    function getWindowSize() {\n        var e = document.documentElement,\n            g = document.getElementsByTagName('body')[0],\n            w = window.innerWidth || e.clientWidth || g.clientWidth,\n            h = window.innerHeight || e.clientHeight || g.clientHeight;\n        return { \"width\": w, \"height\": h };\n    }\n\n    function createPopper(element, stepTarget) {\n        return new __WEBPACK_IMPORTED_MODULE_0_popper_js__[\"a\" /* default */](stepTarget, element, {\n            \"placement\": \"bottom-start\",\n            \"onCreate\": function(dataObject) {\n                // se è posizionato in centro nascondo la freccia\n                element.classList.toggle('center',\n                    stepTarget.guidemeCenter === true);\n                // scroll automatico perché il target sia sempre visibile\n                //  non uso element perché il suo posizionamento può essere ritardato da Popper\n                //  e in ogni caso potrebbe non essere visibile il target\n                stepTarget.scrollIntoView && stepTarget.scrollIntoView(false);\n            }\n        });\n    }\n\n    function nvl(text, def) {\n        return !text || text.length === 0 ? def : text;\n    }\n\n    function resolveFunctionOrValue(valOrFn) {\n        if (typeof valOrFn == 'function' || false) {\n            return valOrFn.apply(null, Array.prototype.slice.call(arguments, 1));\n        } else {\n            return valOrFn;\n        }\n    }\n\n    function stepComparer(stepA, stepB) {\n        if (!stepB.order) return -1;\n        if (!stepA.order) return 1;\n        return (+stepA.order || 0) - (+stepB.order || 0);\n    }\n\n    function elementToStep(element, index) {\n        return {\n            \"el\": element,\n            // se il valore dell'attributo data-guideme è vuoto uso title\n            \"content\": nvl(element.getAttribute('data-guideme'),\n                element.title),\n            // se non è specificato l'ordine uso l'indice\n            \"order\": +element.getAttribute('data-guideme-step')\n        };\n    }\n\n    function stringToStep(value) {\n        return {\n            \"content\": nvl(value, '')\n        };\n    }\n\n    function normalizeStep(step, index) {\n        if (!step.order) {\n            step.order = index + 1;\n        }\n        return step;\n    }\n\n    // elemento di riferimento per posizionare Popper al centro dello schermo\n    function getPopperRererenceCenter(element) {\n        var modWidth = -element.clientWidth / 2,\n            modHeight = -element.clientHeight / 2;\n        return {\n            \"guidemeCenter\": true,\n            \"clientWidth\": 1,\n            \"clientHeight\": 1,\n            \"getBoundingClientRect\": function() {\n                var size = getWindowSize();\n                return {\n                    \"bottom\": size.height / 2 + modHeight,\n                    \"height\": 1,\n                    \"left\": size.width / 2 + modWidth,\n                    \"right\": size.width / 2 + modWidth,\n                    \"top\": size.height / 2 + modHeight,\n                    \"width\": 1\n                };\n            }\n        }\n    }\n\n    var defaultOptions = {\n        attachTo: null,\n        classes: null,\n        title: null,\n        destroyOnDone: false,\n        allowKeyboardNavigation: true,\n        showOverlay: true,\n        overlayClickAction: 'done',\n        buttons: [\n            { \"text\": \"done\", \"action\": \"done\" },\n            { \"text\": \"prev\", \"action\": \"prev\" },\n            { \"text\": \"next\", \"action\": \"next\" }\n        ]\n    };\n\n    var elDialogHtml = '<div x-arrow></div><div class=\"guideme-title\"></div><div class=\"guideme-body\"></div><div class=\"guideme-footer\"></div>';\n\n    /**\n     * Crea una guida.\n     * GuideMe().from('body').start();\n     *\n     * @param      {Object}  options  Opzionale\n     * @return     {Object}  ritorna una istanza di guideme\n     */\n    function GuideMe(options) {\n        var elBody = document.querySelector('body'),\n            elOverloay, elDialog, elDialogTitle, elDialogBody, elDialogFooter,\n            stepList = [],\n            popper;\n\n        options = Object.assign({}, defaultOptions, options);\n        options.attachTo = parseElemnt(options.attachTo, elBody, true);\n        options.attachTo.classList.add('guideme');\n\n        // creo il div per mascherare la pagina\n        if (options.showOverlay) {\n            elOverloay = document.createElement('div');\n            elOverloay.innerHTML = '&nbsp;';\n            elOverloay.className = 'guideme-overlay ' + nvl(options.classes, '');\n            elOverloay.onclick = function() {\n                performAction((options.overlayClickAction || '').toString().toUpperCase());\n            }\n            options.attachTo.appendChild(elOverloay);\n        }\n\n        // creo il dialog\n        elDialog = document.createElement('div');\n        elDialog.innerHTML = elDialogHtml;\n        elDialog.className = 'guideme-dialog';\n        if (options.classes) {\n            elDialog.className += ' ' + nvl(options.classes, '');\n        }\n        elDialogTitle = elDialog.querySelector('.guideme-title');\n        elDialogBody = elDialog.querySelector('.guideme-body');\n        elDialogFooter = elDialog.querySelector('.guideme-footer');\n        options.buttons.map(function(btn) {\n            var elButton = document.createElement('button');\n            elButton.className = 'guideme-button';\n            elButton.innerHTML = btn.text;\n            elButton.setAttribute('data-action', btn.action);\n            elButton.onclick = function() {\n                performAction((btn.action || '').toString().toUpperCase());\n            };\n            return elButton;\n        }).forEach(function(element) {\n            elDialogFooter.appendChild(element);\n        });\n        options.attachTo.appendChild(elDialog);\n\n        /// funzioni interne ///\n\n        function onKeyUp(event) {\n            switch (event.keyCode || event.which) {\n                // case 13: // enter\n                //     event.preventDefault();\n                case 39: // arraow right\n                    performAction('NEXT');\n                    break;\n                    // case 8: // back\n                    //     event.preventDefault();\n                case 37: // arrow left\n                    performAction('PREV');\n                    break;\n                case 27: // esc\n                    performAction('DONE');\n                    break;\n            }\n        }\n\n        function performAction(action) {\n            switch (action) {\n                case 'NEXT':\n                    showStep((+showStep.previous || 0) + 1);\n                    break;\n                case 'PREV':\n                    showStep((+showStep.previous || 0) - 1);\n                    break;\n                case 'DONE':\n                    done();\n                    break;\n            }\n        }\n\n        function showStep(index) {\n            if (index < 0) return;\n            // pulisco il tag dello step precedente\n            if (!isNaN(showStep.previous)) {\n                cleanStepElement(+showStep.previous);\n            }\n            // se non ci sono più step da mostrare termino la guida\n            if (index >= stepList.length) {\n                done();\n                return;\n            }\n\n            var step = stepList[index];\n            elDialogTitle.innerHTML = nvl(resolveFunctionOrValue(options.title, index, step, this), '');\n            elDialogBody.innerHTML = nvl(resolveFunctionOrValue(step.content, index, step, this), '');\n            elDialog.classList.toggle('start', index === 0);\n            elDialog.classList.toggle('end', index === stepList.length - 1);\n            if (step.el) {\n                step.el.classList.add('guideme-step-target');\n                popper && popper.destroy();\n                // posiziono il dialogo rispetto al tag di riferimento\n                popper = createPopper(elDialog, step.el);\n            } else {\n                popper && popper.destroy();\n                // posiziono al centro dello schermo\n                popper = createPopper(elDialog, getPopperRererenceCenter(elDialog));\n            }\n            showStep.previous = index;\n        }\n\n        function cleanStepElement(index) {\n            if (stepList[index].el) {\n                stepList[index].el.classList.remove('guideme-step-target');\n            }\n        }\n\n        function setupEvents() {\n            // gestisco gli eventi per la navigazione\n            if (options.allowKeyboardNavigation) {\n                window.addEventListener('keyup', onKeyUp);\n            }\n        }\n\n        function cleanEvents() {\n            if (options.allowKeyboardNavigation) {\n                window.removeEventListener('keyup', onKeyUp);\n            }\n        }\n\n        function done() {\n            cleanEvents();\n            if (!isNaN(showStep.previous)) {\n                cleanStepElement(+showStep.previous);\n            }\n            options.attachTo.classList.remove('guideme-show');\n            popper && popper.destroy();\n            if (options.destroyOnDone) {\n                destroy();\n            }\n        }\n\n        function destroy() {\n            if (elOverloay) {\n                options.attachTo.removeChild(elOverloay);\n            }\n            options.attachTo.removeChild(elDialog);\n            options.attachTo.classList.remove('guideme', 'guideme-show');\n            stepList = elBody = elOverloay = elDialog =\n                elDialogTitle = elDialogBody = elDialogFooter =\n                null;\n        }\n\n        return {\n            /**\n             * Individua gli elementi con l'attributo [data-guideme] e li aggiunge come step.\n             * Vengono considerati gli elementi stessi individuati da \"from\" che il loro contenuto.\n             *\n             * @param      {HTMLElement, NodeList, selector, jQuery}  selector  uno o più elementi a partire dai quali creare gli step\n             * @return     {Object}  this\n             */\n            from: function(selector) {\n                // selector -> HTMLElement, NodeList, selector, jQuery\n                // cerco tra i figli quelli con [data-guideme]\n                var els = parseSelector(selector),\n                    elStepList;\n                // console.log(selector, els); \n                if (els) {\n                    for (var ii = 0; ii < els.length; ii++) {\n                        // se l'elemento è [data-guideme] lo aggiungo\n                        if (els[ii].hasAttribute('data-guideme')) {\n                            stepList.push(normalizeStep(elementToStep(els[ii]), stepList.length));\n                        }\n                        // cerco al suo interno tutti gli elementi con [data-guideme]\n                        elStepList = els[ii].querySelectorAll('[data-guideme]');\n                        for (var jj = 0; jj < elStepList.length; jj++) {\n                            stepList.push(normalizeStep(elementToStep(elStepList[jj]), stepList.length));\n                        }\n                    }\n                }\n                return this;\n            },\n            /**\n             * Aggiunge uno step di seguito a quelli creati in automatico \n             * (tag con attributo [data-guideme]).\n             * Lo step può essere uno Step, una funzione che ritorna uno Step, \n             * o una stringa che diverrà il contenuto di uno Step senza elememnto.\n             *\n             * @param      {string|Object|Function}  step    lo step\n             * @return     {Object}  this\n             */\n            addStep: function(step) {\n                if (typeof step == 'string') {\n                    stepList.push(normalizeStep(stringToStep(step), stepList.length));\n                } else {\n                    stepList.push(normalizeStep(resolveFunctionOrValue(step), stepList.length));\n                }\n                return this;\n            },\n            start: function(initialStep) {\n                stepList.sort(stepComparer);\n                // console.log(stepList)\n                setupEvents();\n                showStep(+initialStep || 0)\n                options.attachTo.classList.add('guideme', 'guideme-show');\n                return this;\n            },\n            exec: function(action) {\n                performAction((action || '').toString().toUpperCase())\n                return this;\n            },\n            end: function() {\n                done();\n                return this;\n            },\n            destroy: function() {\n                done();\n                destroy();\n                return this;\n            }\n        };\n    }\n\n    window.GuideMe = GuideMe;\n})(window, window.jQuery);\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/**!\n * @fileOverview Kickass library to create and place poppers near their reference elements.\n * @version 1.11.1\n * @license\n * Copyright (c) 2016 Federico Zivolo and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nvar nativeHints = ['native code', '[object MutationObserverConstructor]'];\n\n/**\n * Determine if a function is implemented natively (as opposed to a polyfill).\n * @method\n * @memberof Popper.Utils\n * @argument {Function | undefined} fn the function to check\n * @returns {Boolean}\n */\nvar isNative = (function (fn) {\n  return nativeHints.some(function (hint) {\n    return (fn || '').toString().indexOf(hint) > -1;\n  });\n});\n\nvar isBrowser = typeof window !== 'undefined';\nvar longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\nvar timeoutDuration = 0;\nfor (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n  if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n    timeoutDuration = 1;\n    break;\n  }\n}\n\nfunction microtaskDebounce(fn) {\n  var scheduled = false;\n  var i = 0;\n  var elem = document.createElement('span');\n\n  // MutationObserver provides a mechanism for scheduling microtasks, which\n  // are scheduled *before* the next task. This gives us a way to debounce\n  // a function but ensure it's called *before* the next paint.\n  var observer = new MutationObserver(function () {\n    fn();\n    scheduled = false;\n  });\n\n  observer.observe(elem, { attributes: true });\n\n  return function () {\n    if (!scheduled) {\n      scheduled = true;\n      elem.setAttribute('x-index', i);\n      i = i + 1; // don't use compund (+=) because it doesn't get optimized in V8\n    }\n  };\n}\n\nfunction taskDebounce(fn) {\n  var scheduled = false;\n  return function () {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(function () {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\n// It's common for MutationObserver polyfills to be seen in the wild, however\n// these rely on Mutation Events which only occur when an element is connected\n// to the DOM. The algorithm used in this module does not use a connected element,\n// and so we must ensure that a *native* MutationObserver is available.\nvar supportsNativeMutationObserver = isBrowser && isNative(window.MutationObserver);\n\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nvar debounce = supportsNativeMutationObserver ? microtaskDebounce : taskDebounce;\n\n/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nfunction isFunction(functionToCheck) {\n  var getType = {};\n  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n}\n\n/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nfunction getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  var css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n\n/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nfunction getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nfunction getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element || ['HTML', 'BODY', '#document'].indexOf(element.nodeName) !== -1) {\n    return window.document.body;\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n\n  var _getStyleComputedProp = getStyleComputedProperty(element),\n      overflow = _getStyleComputedProp.overflow,\n      overflowX = _getStyleComputedProp.overflowX,\n      overflowY = _getStyleComputedProp.overflowY;\n\n  if (/(auto|scroll)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nfunction getOffsetParent(element) {\n  // NOTE: 1 DOM access here\n  var offsetParent = element && element.offsetParent;\n  var nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return window.document.documentElement;\n  }\n\n  // .offsetParent will return the closest TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n  if (['TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n\nfunction isOffsetContainer(element) {\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY') {\n    return false;\n  }\n  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;\n}\n\n/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nfunction getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nfunction findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return window.document.documentElement;\n  }\n\n  // Here we make sure to give as \"start\" the element that comes first in the DOM\n  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;\n  var start = order ? element1 : element2;\n  var end = order ? element2 : element1;\n\n  // Get common ancestor container\n  var range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  var commonAncestorContainer = range.commonAncestorContainer;\n\n  // Both nodes are inside #document\n\n  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  var element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n\n/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nfunction getScroll(element) {\n  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';\n\n  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    var html = window.document.documentElement;\n    var scrollingElement = window.document.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nfunction includeScroll(rect, element) {\n  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var scrollTop = getScroll(element, 'top');\n  var scrollLeft = getScroll(element, 'left');\n  var modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n\n/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nfunction getBordersSize(styles, axis) {\n  var sideA = axis === 'x' ? 'Left' : 'Top';\n  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n  return +styles['border' + sideA + 'Width'].split('px')[0] + +styles['border' + sideB + 'Width'].split('px')[0];\n}\n\n/**\n * Tells if you are running Internet Explorer 10\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean} isIE10\n */\nvar isIE10 = undefined;\n\nvar isIE10$1 = function () {\n  if (isIE10 === undefined) {\n    isIE10 = navigator.appVersion.indexOf('MSIE 10') !== -1;\n  }\n  return isIE10;\n};\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(body['offset' + axis], html['client' + axis], html['offset' + axis], isIE10$1() ? html['offset' + axis] + computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')] + computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')] : 0);\n}\n\nfunction getWindowSizes() {\n  var body = window.document.body;\n  var html = window.document.documentElement;\n  var computedStyle = isIE10$1() && window.getComputedStyle(html);\n\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle)\n  };\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\nvar defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nfunction getClientRect(offsets) {\n  return _extends({}, offsets, {\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height\n  });\n}\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nfunction getBoundingClientRect(element) {\n  var rect = {};\n\n  // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n  if (isIE10$1()) {\n    try {\n      rect = element.getBoundingClientRect();\n      var scrollTop = getScroll(element, 'top');\n      var scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    } catch (err) {}\n  } else {\n    rect = element.getBoundingClientRect();\n  }\n\n  var result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top\n  };\n\n  // subtract scrollbar size from sizes\n  var sizes = element.nodeName === 'HTML' ? getWindowSizes() : {};\n  var width = sizes.width || element.clientWidth || result.right - result.left;\n  var height = sizes.height || element.clientHeight || result.bottom - result.top;\n\n  var horizScrollbar = element.offsetWidth - width;\n  var vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    var styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n\nfunction getOffsetRectRelativeToArbitraryNode(children, parent) {\n  var isIE10 = isIE10$1();\n  var isHTML = parent.nodeName === 'HTML';\n  var childrenRect = getBoundingClientRect(children);\n  var parentRect = getBoundingClientRect(parent);\n  var scrollParent = getScrollParent(children);\n\n  var styles = getStyleComputedProperty(parent);\n  var borderTopWidth = +styles.borderTopWidth.split('px')[0];\n  var borderLeftWidth = +styles.borderLeftWidth.split('px')[0];\n\n  var offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (!isIE10 && isHTML) {\n    var marginTop = +styles.marginTop.split('px')[0];\n    var marginLeft = +styles.marginLeft.split('px')[0];\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (isIE10 ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n\nfunction getViewportOffsetRectRelativeToArtbitraryNode(element) {\n  var html = window.document.documentElement;\n  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  var width = Math.max(html.clientWidth, window.innerWidth || 0);\n  var height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  var scrollTop = getScroll(html);\n  var scrollLeft = getScroll(html, 'left');\n\n  var offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width: width,\n    height: height\n  };\n\n  return getClientRect(offset);\n}\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\nfunction isFixed(element) {\n  var nodeName = element.nodeName;\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n  return isFixed(getParentNode(element));\n}\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @returns {Object} Coordinates of the boundaries\n */\nfunction getBoundaries(popper, reference, padding, boundariesElement) {\n  // NOTE: 1 DOM access here\n  var boundaries = { top: 0, left: 0 };\n  var offsetParent = findCommonOffsetParent(popper, reference);\n\n  // Handle viewport case\n  if (boundariesElement === 'viewport') {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent);\n  } else {\n    // Handle other cases based on DOM element used as boundaries\n    var boundariesNode = void 0;\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(popper));\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = window.document.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = window.document.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent);\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      var _getWindowSizes = getWindowSizes(),\n          height = _getWindowSizes.height,\n          width = _getWindowSizes.width;\n\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  boundaries.left += padding;\n  boundaries.top += padding;\n  boundaries.right -= padding;\n  boundaries.bottom -= padding;\n\n  return boundaries;\n}\n\nfunction getArea(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {\n  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);\n\n  var rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height\n    }\n  };\n\n  var sortedAreas = Object.keys(rects).map(function (key) {\n    return _extends({\n      key: key\n    }, rects[key], {\n      area: getArea(rects[key])\n    });\n  }).sort(function (a, b) {\n    return b.area - a.area;\n  });\n\n  var filteredAreas = sortedAreas.filter(function (_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height;\n    return width >= popper.clientWidth && height >= popper.clientHeight;\n  });\n\n  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;\n\n  var variation = placement.split('-')[1];\n\n  return computedPlacement + (variation ? '-' + variation : '');\n}\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nfunction getReferenceOffsets(state, popper, reference) {\n  var commonOffsetParent = findCommonOffsetParent(popper, reference);\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent);\n}\n\n/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nfunction getOuterSizes(element) {\n  var styles = window.getComputedStyle(element);\n  var x = parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);\n  var y = parseFloat(styles.marginLeft) + parseFloat(styles.marginRight);\n  var result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x\n  };\n  return result;\n}\n\n/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nfunction getOppositePlacement(placement) {\n  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nfunction getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0];\n\n  // Get popper node sizes\n  var popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  var popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  var mainSide = isHoriz ? 'top' : 'left';\n  var secondarySide = isHoriz ? 'left' : 'top';\n  var measurement = isHoriz ? 'height' : 'width';\n  var secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n\n/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(function (cur) {\n      return cur[prop] === value;\n    });\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn't supported\n  var match = find(arr, function (obj) {\n    return obj[prop] === value;\n  });\n  return arr.indexOf(match);\n}\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nfunction runModifiers(modifiers, data, ends) {\n  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n  modifiersToRun.forEach(function (modifier) {\n    if (modifier.function) {\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n    var fn = modifier.function || modifier.fn;\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nfunction update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  var data = {\n    instance: this,\n    styles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {}\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);\n  data.offsets.popper.position = 'absolute';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n\n/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nfunction isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(function (_ref) {\n    var name = _ref.name,\n        enabled = _ref.enabled;\n    return enabled && name === modifierName;\n  });\n}\n\n/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\nfunction getSupportedPropertyName(property) {\n  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (var i = 0; i < prefixes.length - 1; i++) {\n    var prefix = prefixes[i];\n    var toCheck = prefix ? '' + prefix + upperProp : property;\n    if (typeof window.document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n\n/**\n * Destroy the popper\n * @method\n * @memberof Popper\n */\nfunction destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.left = '';\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicity asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  var isBody = scrollParent.nodeName === 'BODY';\n  var target = isBody ? window : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction setupEventListeners(reference, options, state, updateBound) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  window.addEventListener('resize', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  var scrollElement = getScrollParent(reference);\n  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nfunction enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);\n  }\n}\n\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  window.removeEventListener('resize', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(function (target) {\n    target.removeEventListener('scroll', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger onUpdate callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nfunction disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    window.cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n\n/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nfunction isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setStyles(element, styles) {\n  Object.keys(styles).forEach(function (prop) {\n    var unit = '';\n    // add unit if the value is numeric and is one of the following\n    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {\n      unit = 'px';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n\n/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function (prop) {\n    var value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nfunction applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if the arrow style has been computed, apply the arrow style\n  if (data.offsets.arrow) {\n    setStyles(data.arrowElement, data.offsets.arrow);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper.\n * @param {Object} options - Popper.js options\n */\nfunction applyStyleOnLoad(reference, popper, options, modifierOptions, state) {\n  // compute reference element offsets\n  var referenceOffsets = getReferenceOffsets(state, popper, reference);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);\n\n  popper.setAttribute('x-placement', placement);\n\n  // Apply `position` to popper before anything else because\n  // without the position applied we can't guarantee correct computations\n  setStyles(popper, { position: 'absolute' });\n\n  return options;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeStyle(data, options) {\n  var x = options.x,\n      y = options.y;\n  var popper = data.offsets.popper;\n\n  // Remove this legacy support in Popper.js v2\n\n  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'applyStyle';\n  }).gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');\n  }\n  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;\n\n  var offsetParent = getOffsetParent(data.instance.popper);\n  var offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  var styles = {\n    position: popper.position\n  };\n\n  // floor sides to avoid blurry text\n  var offsets = {\n    left: Math.floor(popper.left),\n    top: Math.floor(popper.top),\n    bottom: Math.floor(popper.bottom),\n    right: Math.floor(popper.right)\n  };\n\n  var sideA = x === 'bottom' ? 'top' : 'bottom';\n  var sideB = y === 'right' ? 'left' : 'right';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  var prefixedProperty = getSupportedPropertyName('transform');\n\n  // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  var left = void 0,\n      top = void 0;\n  if (sideA === 'bottom') {\n    top = -offsetParentRect.height + offsets.bottom;\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === 'right') {\n    left = -offsetParentRect.width + offsets.right;\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    var invertTop = sideA === 'bottom' ? -1 : 1;\n    var invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = sideA + ', ' + sideB;\n  }\n\n  // Attributes\n  var attributes = {\n    'x-placement': data.placement\n  };\n\n  // Update attributes and styles of `data`\n  data.attributes = _extends({}, attributes, data.attributes);\n  data.styles = _extends({}, styles, data.styles);\n\n  return data;\n}\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nfunction isModifierRequired(modifiers, requestingName, requestedName) {\n  var requesting = find(modifiers, function (_ref) {\n    var name = _ref.name;\n    return name === requestingName;\n  });\n\n  var isRequired = !!requesting && modifiers.some(function (modifier) {\n    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;\n  });\n\n  if (!isRequired) {\n    var _requesting = '`' + requestingName + '`';\n    var requested = '`' + requestedName + '`';\n    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');\n  }\n  return isRequired;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction arrow(data, options) {\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  var arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it's a CSS selector\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don't run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn('WARNING: `arrow.element` must be child of its popper element!');\n      return data;\n    }\n  }\n\n  var placement = data.placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n  var len = isVertical ? 'height' : 'width';\n  var side = isVertical ? 'top' : 'left';\n  var altSide = isVertical ? 'left' : 'top';\n  var opSide = isVertical ? 'bottom' : 'right';\n  var arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its reference have enough pixels in conjuction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];\n  }\n\n  // compute center of the popper\n  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  var sideValue = center - getClientRect(data.offsets.popper)[side];\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = {};\n  data.offsets.arrow[side] = Math.round(sideValue);\n  data.offsets.arrow[altSide] = ''; // make sure to unset any eventual altSide value from the DOM node\n\n  return data;\n}\n\n/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nfunction getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n  return variation;\n}\n\n/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-right` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nvar placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];\n\n// Get rid of `auto` `auto-start` and `auto-end`\nvar validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nfunction clockwise(placement) {\n  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var index = validPlacements.indexOf(placement);\n  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n\nvar BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise'\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement);\n\n  var placement = data.placement.split('-')[0];\n  var placementOpposite = getOppositePlacement(placement);\n  var variation = data.placement.split('-')[1] || '';\n\n  var flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach(function (step, index) {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    var popperOffsets = data.offsets.popper;\n    var refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    var floor = Math.floor;\n    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);\n\n    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;\n\n    // flip the variation if required\n    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n    var flippedVariation = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : '');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));\n\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction keepTogether(data) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var placement = data.placement.split('-')[0];\n  var floor = Math.floor;\n  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  var side = isVertical ? 'right' : 'bottom';\n  var opSide = isVertical ? 'left' : 'top';\n  var measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nfunction toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  var split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  var value = +split[1];\n  var unit = split[2];\n\n  // If it's not a number it's an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    var element = void 0;\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    var rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    var size = void 0;\n    if (unit === 'vh') {\n      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n    } else {\n      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nfunction parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {\n  var offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  var fragments = offset.split(/(\\+|\\-)/).map(function (frag) {\n    return frag.trim();\n  });\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  var divider = fragments.indexOf(find(fragments, function (frag) {\n    return frag.search(/,|\\s/) !== -1;\n  }));\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  var splitRegex = /\\s*,\\s*|\\s+/;\n  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map(function (op, index) {\n    // Most of the units rely on the orientation of the popper\n    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';\n    var mergeWithPrevious = false;\n    return op\n    // This aggregates any `+` or `-` sign that aren't considered operators\n    // e.g.: 10 + +5 => [10, +, +5]\n    .reduce(function (a, b) {\n      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n        a[a.length - 1] = b;\n        mergeWithPrevious = true;\n        return a;\n      } else if (mergeWithPrevious) {\n        a[a.length - 1] += b;\n        mergeWithPrevious = false;\n        return a;\n      } else {\n        return a.concat(b);\n      }\n    }, [])\n    // Here we convert the string values into number values (in px)\n    .map(function (str) {\n      return toValue(str, measurement, popperOffsets, referenceOffsets);\n    });\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach(function (op, index) {\n    op.forEach(function (frag, index2) {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nfunction offset(data, _ref) {\n  var offset = _ref.offset;\n  var placement = data.placement,\n      _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var basePlacement = placement.split('-')[0];\n\n  var offsets = void 0;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction preventOverflow(data, options) {\n  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement);\n  options.boundaries = boundaries;\n\n  var order = options.priority;\n  var popper = data.offsets.popper;\n\n  var check = {\n    primary: function primary(placement) {\n      var value = popper[placement];\n      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return defineProperty({}, placement, value);\n    },\n    secondary: function secondary(placement) {\n      var mainSide = placement === 'right' ? 'left' : 'top';\n      var value = popper[mainSide];\n      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {\n        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));\n      }\n      return defineProperty({}, mainSide, value);\n    }\n  };\n\n  order.forEach(function (placement) {\n    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    popper = _extends({}, popper, check[side](placement));\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction shift(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var shiftvariation = placement.split('-')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    var _data$offsets = data.offsets,\n        reference = _data$offsets.reference,\n        popper = _data$offsets.popper;\n\n    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    var side = isVertical ? 'left' : 'top';\n    var measurement = isVertical ? 'width' : 'height';\n\n    var shiftOffsets = {\n      start: defineProperty({}, side, reference[side]),\n      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])\n    };\n\n    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  var refRect = data.offsets.reference;\n  var bound = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'preventOverflow';\n  }).boundaries;\n\n  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction inner(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? 'left' : 'top'] = reference[placement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nvar modifiers = {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unitless, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the height.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * An scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper this makes sure the popper has always a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier, can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent'\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near eachothers\n   * without leaving any gap between the two. Expecially useful when the arrow is\n   * enabled and you want to assure it to point to its reference element.\n   * It cares only about the first axis, you can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjuction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]'\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations).\n     */\n    behavior: 'flip',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position,\n     * the popper will never be placed outside of the defined boundaries\n     * (except if keepTogether is enabled)\n     */\n    boundariesElement: 'viewport'\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3d transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties.\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right'\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define you own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3d transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties.\n     */\n    gpuAcceleration: undefined\n  }\n};\n\n/**\n * The `dataObject` is an object containing all the informations used by Popper.js\n * this object get passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper.\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper, it expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements.\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overriden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass as 3rd argument an object with the same\n * structure of this object, example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nvar Defaults = {\n  /**\n   * Popper's placement\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Whether events (resize, scroll) are initially enabled\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: function onCreate() {},\n\n  /**\n   * Callback called when the popper is updated, this callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: function onUpdate() {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js\n   * @prop {modifiers}\n   */\n  modifiers: modifiers\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n\n// Utils\n// Methods\nvar Popper = function () {\n  /**\n   * Create a new Popper.js instance\n   * @class Popper\n   * @param {HTMLElement|referenceObject} reference - The reference element used to position the popper\n   * @param {HTMLElement} popper - The HTML element used as popper.\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  function Popper(reference, popper) {\n    var _this = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    classCallCheck(this, Popper);\n\n    this.scheduleUpdate = function () {\n      return requestAnimationFrame(_this.update);\n    };\n\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = _extends({}, Popper.Defaults, options);\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: []\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference.jquery ? reference[0] : reference;\n    this.popper = popper.jquery ? popper[0] : popper;\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {\n      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});\n    });\n\n    // Refactoring modifiers' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {\n      return _extends({\n        name: name\n      }, _this.options.modifiers[name]);\n    })\n    // sort the modifiers by order\n    .sort(function (a, b) {\n      return a.order - b.order;\n    });\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(function (modifierOptions) {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    var eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n\n\n  createClass(Popper, [{\n    key: 'update',\n    value: function update$$1() {\n      return update.call(this);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy$$1() {\n      return destroy.call(this);\n    }\n  }, {\n    key: 'enableEventListeners',\n    value: function enableEventListeners$$1() {\n      return enableEventListeners.call(this);\n    }\n  }, {\n    key: 'disableEventListeners',\n    value: function disableEventListeners$$1() {\n      return disableEventListeners.call(this);\n    }\n\n    /**\n     * Schedule an update, it will run on the next UI update available\n     * @method scheduleUpdate\n     * @memberof Popper\n     */\n\n\n    /**\n     * Collection of utilities useful when writing custom modifiers.\n     * Starting from version 1.7, this method is available only if you\n     * include `popper-utils.js` before `popper.js`.\n     *\n     * **DEPRECATION**: This way to access PopperUtils is deprecated\n     * and will be removed in v2! Use the PopperUtils module directly instead.\n     * Due to the high instability of the methods contained in Utils, we can't\n     * guarantee them to follow semver. Use them at your own risk!\n     * @static\n     * @private\n     * @type {Object}\n     * @deprecated since version 1.8\n     * @member Utils\n     * @memberof Popper\n     */\n\n  }]);\n  return Popper;\n}();\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n\n\nPopper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;\nPopper.placements = placements;\nPopper.Defaults = Defaults;\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Popper);\n//# sourceMappingURL=popper.js.map\n\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(2)))\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// guideme.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2b6742cf28c20400318a","import Popper from 'popper.js';\n\n;\n(function(window, $) {\n    \"use strict\";\n\n    // @see https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    if (!Object.assign) {\n        Object.defineProperty(Object, 'assign', {\n            enumerable: false,\n            configurable: true,\n            writable: true,\n            value: function(target, firstSource) {\n                'use strict';\n                if (target === undefined || target === null) {\n                    throw new TypeError('Cannot convert first argument to object');\n                }\n\n                var to = Object(target);\n                for (var i = 1; i < arguments.length; i++) {\n                    var nextSource = arguments[i];\n                    if (nextSource === undefined || nextSource === null) {\n                        continue;\n                    }\n                    nextSource = Object(nextSource);\n\n                    var keysArray = Object.keys(Object(nextSource));\n                    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {\n                        var nextKey = keysArray[nextIndex];\n                        var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n                        if (desc !== undefined && desc.enumerable) {\n                            to[nextKey] = nextSource[nextKey];\n                        }\n                    }\n                }\n                return to;\n            }\n        });\n    }\n\n    function parseElemnt(element, defaultElement, fallToDefault) {\n        if (!element) {\n            return defaultElement;\n        } else if (element instanceof HTMLElement) {\n            return element;\n        } else if (element instanceof NodeList) {\n            return element[0];\n        } else if (typeof element == 'string') {\n            return document.querySelector(element);\n        } else if ($ && element.jquery) {\n            return element.get(0);\n        } else if (fallToDefault) {\n            return defaultElement;\n        } else {\n            return null;\n        }\n    }\n\n    // ritorna null o un array di elementi\n    function parseSelector(selector) {\n        if (!selector) {\n            return null;\n        } else if (selector instanceof HTMLElement) {\n            return [selector];\n        } else if (selector instanceof NodeList) {\n            return selector;\n        } else if (typeof selector == 'string') {\n            return document.querySelectorAll(selector);\n        } else if ($ && selector.jquery) {\n            return selector.get();\n        } else {\n            return null;\n        }\n    }\n\n    function getBodySize() {\n        var w = document.body.clientWidth,\n            h = document.body.clientHeight;\n        return { \"width\": w, \"height\": h };\n    }\n\n    function getWindowSize() {\n        var e = document.documentElement,\n            g = document.getElementsByTagName('body')[0],\n            w = window.innerWidth || e.clientWidth || g.clientWidth,\n            h = window.innerHeight || e.clientHeight || g.clientHeight;\n        return { \"width\": w, \"height\": h };\n    }\n\n    function createPopper(element, stepTarget) {\n        return new Popper(stepTarget, element, {\n            \"placement\": \"bottom-start\",\n            \"onCreate\": function(dataObject) {\n                // se è posizionato in centro nascondo la freccia\n                element.classList.toggle('center',\n                    stepTarget.guidemeCenter === true);\n                // scroll automatico perché il target sia sempre visibile\n                //  non uso element perché il suo posizionamento può essere ritardato da Popper\n                //  e in ogni caso potrebbe non essere visibile il target\n                stepTarget.scrollIntoView && stepTarget.scrollIntoView(false);\n            }\n        });\n    }\n\n    function nvl(text, def) {\n        return !text || text.length === 0 ? def : text;\n    }\n\n    function resolveFunctionOrValue(valOrFn) {\n        if (typeof valOrFn == 'function' || false) {\n            return valOrFn.apply(null, Array.prototype.slice.call(arguments, 1));\n        } else {\n            return valOrFn;\n        }\n    }\n\n    function stepComparer(stepA, stepB) {\n        if (!stepB.order) return -1;\n        if (!stepA.order) return 1;\n        return (+stepA.order || 0) - (+stepB.order || 0);\n    }\n\n    function elementToStep(element, index) {\n        return {\n            \"el\": element,\n            // se il valore dell'attributo data-guideme è vuoto uso title\n            \"content\": nvl(element.getAttribute('data-guideme'),\n                element.title),\n            // se non è specificato l'ordine uso l'indice\n            \"order\": +element.getAttribute('data-guideme-step')\n        };\n    }\n\n    function stringToStep(value) {\n        return {\n            \"content\": nvl(value, '')\n        };\n    }\n\n    function normalizeStep(step, index) {\n        if (!step.order) {\n            step.order = index + 1;\n        }\n        return step;\n    }\n\n    // elemento di riferimento per posizionare Popper al centro dello schermo\n    function getPopperRererenceCenter(element) {\n        var modWidth = -element.clientWidth / 2,\n            modHeight = -element.clientHeight / 2;\n        return {\n            \"guidemeCenter\": true,\n            \"clientWidth\": 1,\n            \"clientHeight\": 1,\n            \"getBoundingClientRect\": function() {\n                var size = getWindowSize();\n                return {\n                    \"bottom\": size.height / 2 + modHeight,\n                    \"height\": 1,\n                    \"left\": size.width / 2 + modWidth,\n                    \"right\": size.width / 2 + modWidth,\n                    \"top\": size.height / 2 + modHeight,\n                    \"width\": 1\n                };\n            }\n        }\n    }\n\n    var defaultOptions = {\n        attachTo: null,\n        classes: null,\n        title: null,\n        destroyOnDone: false,\n        allowKeyboardNavigation: true,\n        showOverlay: true,\n        overlayClickAction: 'done',\n        buttons: [\n            { \"text\": \"done\", \"action\": \"done\" },\n            { \"text\": \"prev\", \"action\": \"prev\" },\n            { \"text\": \"next\", \"action\": \"next\" }\n        ]\n    };\n\n    var elDialogHtml = '<div x-arrow></div><div class=\"guideme-title\"></div><div class=\"guideme-body\"></div><div class=\"guideme-footer\"></div>';\n\n    /**\n     * Crea una guida.\n     * GuideMe().from('body').start();\n     *\n     * @param      {Object}  options  Opzionale\n     * @return     {Object}  ritorna una istanza di guideme\n     */\n    function GuideMe(options) {\n        var elBody = document.querySelector('body'),\n            elOverloay, elDialog, elDialogTitle, elDialogBody, elDialogFooter,\n            stepList = [],\n            popper;\n\n        options = Object.assign({}, defaultOptions, options);\n        options.attachTo = parseElemnt(options.attachTo, elBody, true);\n        options.attachTo.classList.add('guideme');\n\n        // creo il div per mascherare la pagina\n        if (options.showOverlay) {\n            elOverloay = document.createElement('div');\n            elOverloay.innerHTML = '&nbsp;';\n            elOverloay.className = 'guideme-overlay ' + nvl(options.classes, '');\n            elOverloay.onclick = function() {\n                performAction((options.overlayClickAction || '').toString().toUpperCase());\n            }\n            options.attachTo.appendChild(elOverloay);\n        }\n\n        // creo il dialog\n        elDialog = document.createElement('div');\n        elDialog.innerHTML = elDialogHtml;\n        elDialog.className = 'guideme-dialog';\n        if (options.classes) {\n            elDialog.className += ' ' + nvl(options.classes, '');\n        }\n        elDialogTitle = elDialog.querySelector('.guideme-title');\n        elDialogBody = elDialog.querySelector('.guideme-body');\n        elDialogFooter = elDialog.querySelector('.guideme-footer');\n        options.buttons.map(function(btn) {\n            var elButton = document.createElement('button');\n            elButton.className = 'guideme-button';\n            elButton.innerHTML = btn.text;\n            elButton.setAttribute('data-action', btn.action);\n            elButton.onclick = function() {\n                performAction((btn.action || '').toString().toUpperCase());\n            };\n            return elButton;\n        }).forEach(function(element) {\n            elDialogFooter.appendChild(element);\n        });\n        options.attachTo.appendChild(elDialog);\n\n        /// funzioni interne ///\n\n        function onKeyUp(event) {\n            switch (event.keyCode || event.which) {\n                // case 13: // enter\n                //     event.preventDefault();\n                case 39: // arraow right\n                    performAction('NEXT');\n                    break;\n                    // case 8: // back\n                    //     event.preventDefault();\n                case 37: // arrow left\n                    performAction('PREV');\n                    break;\n                case 27: // esc\n                    performAction('DONE');\n                    break;\n            }\n        }\n\n        function performAction(action) {\n            switch (action) {\n                case 'NEXT':\n                    showStep((+showStep.previous || 0) + 1);\n                    break;\n                case 'PREV':\n                    showStep((+showStep.previous || 0) - 1);\n                    break;\n                case 'DONE':\n                    done();\n                    break;\n            }\n        }\n\n        function showStep(index) {\n            if (index < 0) return;\n            // pulisco il tag dello step precedente\n            if (!isNaN(showStep.previous)) {\n                cleanStepElement(+showStep.previous);\n            }\n            // se non ci sono più step da mostrare termino la guida\n            if (index >= stepList.length) {\n                done();\n                return;\n            }\n\n            var step = stepList[index];\n            elDialogTitle.innerHTML = nvl(resolveFunctionOrValue(options.title, index, step, this), '');\n            elDialogBody.innerHTML = nvl(resolveFunctionOrValue(step.content, index, step, this), '');\n            elDialog.classList.toggle('start', index === 0);\n            elDialog.classList.toggle('end', index === stepList.length - 1);\n            if (step.el) {\n                step.el.classList.add('guideme-step-target');\n                popper && popper.destroy();\n                // posiziono il dialogo rispetto al tag di riferimento\n                popper = createPopper(elDialog, step.el);\n            } else {\n                popper && popper.destroy();\n                // posiziono al centro dello schermo\n                popper = createPopper(elDialog, getPopperRererenceCenter(elDialog));\n            }\n            showStep.previous = index;\n        }\n\n        function cleanStepElement(index) {\n            if (stepList[index].el) {\n                stepList[index].el.classList.remove('guideme-step-target');\n            }\n        }\n\n        function setupEvents() {\n            // gestisco gli eventi per la navigazione\n            if (options.allowKeyboardNavigation) {\n                window.addEventListener('keyup', onKeyUp);\n            }\n        }\n\n        function cleanEvents() {\n            if (options.allowKeyboardNavigation) {\n                window.removeEventListener('keyup', onKeyUp);\n            }\n        }\n\n        function done() {\n            cleanEvents();\n            if (!isNaN(showStep.previous)) {\n                cleanStepElement(+showStep.previous);\n            }\n            options.attachTo.classList.remove('guideme-show');\n            popper && popper.destroy();\n            if (options.destroyOnDone) {\n                destroy();\n            }\n        }\n\n        function destroy() {\n            if (elOverloay) {\n                options.attachTo.removeChild(elOverloay);\n            }\n            options.attachTo.removeChild(elDialog);\n            options.attachTo.classList.remove('guideme', 'guideme-show');\n            stepList = elBody = elOverloay = elDialog =\n                elDialogTitle = elDialogBody = elDialogFooter =\n                null;\n        }\n\n        return {\n            /**\n             * Individua gli elementi con l'attributo [data-guideme] e li aggiunge come step.\n             * Vengono considerati gli elementi stessi individuati da \"from\" che il loro contenuto.\n             *\n             * @param      {HTMLElement, NodeList, selector, jQuery}  selector  uno o più elementi a partire dai quali creare gli step\n             * @return     {Object}  this\n             */\n            from: function(selector) {\n                // selector -> HTMLElement, NodeList, selector, jQuery\n                // cerco tra i figli quelli con [data-guideme]\n                var els = parseSelector(selector),\n                    elStepList;\n                // console.log(selector, els); \n                if (els) {\n                    for (var ii = 0; ii < els.length; ii++) {\n                        // se l'elemento è [data-guideme] lo aggiungo\n                        if (els[ii].hasAttribute('data-guideme')) {\n                            stepList.push(normalizeStep(elementToStep(els[ii]), stepList.length));\n                        }\n                        // cerco al suo interno tutti gli elementi con [data-guideme]\n                        elStepList = els[ii].querySelectorAll('[data-guideme]');\n                        for (var jj = 0; jj < elStepList.length; jj++) {\n                            stepList.push(normalizeStep(elementToStep(elStepList[jj]), stepList.length));\n                        }\n                    }\n                }\n                return this;\n            },\n            /**\n             * Aggiunge uno step di seguito a quelli creati in automatico \n             * (tag con attributo [data-guideme]).\n             * Lo step può essere uno Step, una funzione che ritorna uno Step, \n             * o una stringa che diverrà il contenuto di uno Step senza elememnto.\n             *\n             * @param      {string|Object|Function}  step    lo step\n             * @return     {Object}  this\n             */\n            addStep: function(step) {\n                if (typeof step == 'string') {\n                    stepList.push(normalizeStep(stringToStep(step), stepList.length));\n                } else {\n                    stepList.push(normalizeStep(resolveFunctionOrValue(step), stepList.length));\n                }\n                return this;\n            },\n            start: function(initialStep) {\n                stepList.sort(stepComparer);\n                // console.log(stepList)\n                setupEvents();\n                showStep(+initialStep || 0)\n                options.attachTo.classList.add('guideme', 'guideme-show');\n                return this;\n            },\n            exec: function(action) {\n                performAction((action || '').toString().toUpperCase())\n                return this;\n            },\n            end: function() {\n                done();\n                return this;\n            },\n            destroy: function() {\n                done();\n                destroy();\n                return this;\n            }\n        };\n    }\n\n    window.GuideMe = GuideMe;\n})(window, window.jQuery);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./guideme.js\n// module id = 0\n// module chunks = 0","/**!\n * @fileOverview Kickass library to create and place poppers near their reference elements.\n * @version 1.11.1\n * @license\n * Copyright (c) 2016 Federico Zivolo and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nvar nativeHints = ['native code', '[object MutationObserverConstructor]'];\n\n/**\n * Determine if a function is implemented natively (as opposed to a polyfill).\n * @method\n * @memberof Popper.Utils\n * @argument {Function | undefined} fn the function to check\n * @returns {Boolean}\n */\nvar isNative = (function (fn) {\n  return nativeHints.some(function (hint) {\n    return (fn || '').toString().indexOf(hint) > -1;\n  });\n});\n\nvar isBrowser = typeof window !== 'undefined';\nvar longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\nvar timeoutDuration = 0;\nfor (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n  if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n    timeoutDuration = 1;\n    break;\n  }\n}\n\nfunction microtaskDebounce(fn) {\n  var scheduled = false;\n  var i = 0;\n  var elem = document.createElement('span');\n\n  // MutationObserver provides a mechanism for scheduling microtasks, which\n  // are scheduled *before* the next task. This gives us a way to debounce\n  // a function but ensure it's called *before* the next paint.\n  var observer = new MutationObserver(function () {\n    fn();\n    scheduled = false;\n  });\n\n  observer.observe(elem, { attributes: true });\n\n  return function () {\n    if (!scheduled) {\n      scheduled = true;\n      elem.setAttribute('x-index', i);\n      i = i + 1; // don't use compund (+=) because it doesn't get optimized in V8\n    }\n  };\n}\n\nfunction taskDebounce(fn) {\n  var scheduled = false;\n  return function () {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(function () {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\n// It's common for MutationObserver polyfills to be seen in the wild, however\n// these rely on Mutation Events which only occur when an element is connected\n// to the DOM. The algorithm used in this module does not use a connected element,\n// and so we must ensure that a *native* MutationObserver is available.\nvar supportsNativeMutationObserver = isBrowser && isNative(window.MutationObserver);\n\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nvar debounce = supportsNativeMutationObserver ? microtaskDebounce : taskDebounce;\n\n/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nfunction isFunction(functionToCheck) {\n  var getType = {};\n  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n}\n\n/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nfunction getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  var css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n\n/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nfunction getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nfunction getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element || ['HTML', 'BODY', '#document'].indexOf(element.nodeName) !== -1) {\n    return window.document.body;\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n\n  var _getStyleComputedProp = getStyleComputedProperty(element),\n      overflow = _getStyleComputedProp.overflow,\n      overflowX = _getStyleComputedProp.overflowX,\n      overflowY = _getStyleComputedProp.overflowY;\n\n  if (/(auto|scroll)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nfunction getOffsetParent(element) {\n  // NOTE: 1 DOM access here\n  var offsetParent = element && element.offsetParent;\n  var nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return window.document.documentElement;\n  }\n\n  // .offsetParent will return the closest TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n  if (['TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n\nfunction isOffsetContainer(element) {\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY') {\n    return false;\n  }\n  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;\n}\n\n/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nfunction getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nfunction findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return window.document.documentElement;\n  }\n\n  // Here we make sure to give as \"start\" the element that comes first in the DOM\n  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;\n  var start = order ? element1 : element2;\n  var end = order ? element2 : element1;\n\n  // Get common ancestor container\n  var range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  var commonAncestorContainer = range.commonAncestorContainer;\n\n  // Both nodes are inside #document\n\n  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  var element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n\n/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nfunction getScroll(element) {\n  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';\n\n  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    var html = window.document.documentElement;\n    var scrollingElement = window.document.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nfunction includeScroll(rect, element) {\n  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var scrollTop = getScroll(element, 'top');\n  var scrollLeft = getScroll(element, 'left');\n  var modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n\n/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nfunction getBordersSize(styles, axis) {\n  var sideA = axis === 'x' ? 'Left' : 'Top';\n  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n  return +styles['border' + sideA + 'Width'].split('px')[0] + +styles['border' + sideB + 'Width'].split('px')[0];\n}\n\n/**\n * Tells if you are running Internet Explorer 10\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean} isIE10\n */\nvar isIE10 = undefined;\n\nvar isIE10$1 = function () {\n  if (isIE10 === undefined) {\n    isIE10 = navigator.appVersion.indexOf('MSIE 10') !== -1;\n  }\n  return isIE10;\n};\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(body['offset' + axis], html['client' + axis], html['offset' + axis], isIE10$1() ? html['offset' + axis] + computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')] + computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')] : 0);\n}\n\nfunction getWindowSizes() {\n  var body = window.document.body;\n  var html = window.document.documentElement;\n  var computedStyle = isIE10$1() && window.getComputedStyle(html);\n\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle)\n  };\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\nvar defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nfunction getClientRect(offsets) {\n  return _extends({}, offsets, {\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height\n  });\n}\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nfunction getBoundingClientRect(element) {\n  var rect = {};\n\n  // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n  if (isIE10$1()) {\n    try {\n      rect = element.getBoundingClientRect();\n      var scrollTop = getScroll(element, 'top');\n      var scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    } catch (err) {}\n  } else {\n    rect = element.getBoundingClientRect();\n  }\n\n  var result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top\n  };\n\n  // subtract scrollbar size from sizes\n  var sizes = element.nodeName === 'HTML' ? getWindowSizes() : {};\n  var width = sizes.width || element.clientWidth || result.right - result.left;\n  var height = sizes.height || element.clientHeight || result.bottom - result.top;\n\n  var horizScrollbar = element.offsetWidth - width;\n  var vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    var styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n\nfunction getOffsetRectRelativeToArbitraryNode(children, parent) {\n  var isIE10 = isIE10$1();\n  var isHTML = parent.nodeName === 'HTML';\n  var childrenRect = getBoundingClientRect(children);\n  var parentRect = getBoundingClientRect(parent);\n  var scrollParent = getScrollParent(children);\n\n  var styles = getStyleComputedProperty(parent);\n  var borderTopWidth = +styles.borderTopWidth.split('px')[0];\n  var borderLeftWidth = +styles.borderLeftWidth.split('px')[0];\n\n  var offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (!isIE10 && isHTML) {\n    var marginTop = +styles.marginTop.split('px')[0];\n    var marginLeft = +styles.marginLeft.split('px')[0];\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (isIE10 ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n\nfunction getViewportOffsetRectRelativeToArtbitraryNode(element) {\n  var html = window.document.documentElement;\n  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  var width = Math.max(html.clientWidth, window.innerWidth || 0);\n  var height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  var scrollTop = getScroll(html);\n  var scrollLeft = getScroll(html, 'left');\n\n  var offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width: width,\n    height: height\n  };\n\n  return getClientRect(offset);\n}\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\nfunction isFixed(element) {\n  var nodeName = element.nodeName;\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n  return isFixed(getParentNode(element));\n}\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @returns {Object} Coordinates of the boundaries\n */\nfunction getBoundaries(popper, reference, padding, boundariesElement) {\n  // NOTE: 1 DOM access here\n  var boundaries = { top: 0, left: 0 };\n  var offsetParent = findCommonOffsetParent(popper, reference);\n\n  // Handle viewport case\n  if (boundariesElement === 'viewport') {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent);\n  } else {\n    // Handle other cases based on DOM element used as boundaries\n    var boundariesNode = void 0;\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(popper));\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = window.document.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = window.document.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent);\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      var _getWindowSizes = getWindowSizes(),\n          height = _getWindowSizes.height,\n          width = _getWindowSizes.width;\n\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  boundaries.left += padding;\n  boundaries.top += padding;\n  boundaries.right -= padding;\n  boundaries.bottom -= padding;\n\n  return boundaries;\n}\n\nfunction getArea(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {\n  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);\n\n  var rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height\n    }\n  };\n\n  var sortedAreas = Object.keys(rects).map(function (key) {\n    return _extends({\n      key: key\n    }, rects[key], {\n      area: getArea(rects[key])\n    });\n  }).sort(function (a, b) {\n    return b.area - a.area;\n  });\n\n  var filteredAreas = sortedAreas.filter(function (_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height;\n    return width >= popper.clientWidth && height >= popper.clientHeight;\n  });\n\n  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;\n\n  var variation = placement.split('-')[1];\n\n  return computedPlacement + (variation ? '-' + variation : '');\n}\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nfunction getReferenceOffsets(state, popper, reference) {\n  var commonOffsetParent = findCommonOffsetParent(popper, reference);\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent);\n}\n\n/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nfunction getOuterSizes(element) {\n  var styles = window.getComputedStyle(element);\n  var x = parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);\n  var y = parseFloat(styles.marginLeft) + parseFloat(styles.marginRight);\n  var result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x\n  };\n  return result;\n}\n\n/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nfunction getOppositePlacement(placement) {\n  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nfunction getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0];\n\n  // Get popper node sizes\n  var popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  var popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  var mainSide = isHoriz ? 'top' : 'left';\n  var secondarySide = isHoriz ? 'left' : 'top';\n  var measurement = isHoriz ? 'height' : 'width';\n  var secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n\n/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(function (cur) {\n      return cur[prop] === value;\n    });\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn't supported\n  var match = find(arr, function (obj) {\n    return obj[prop] === value;\n  });\n  return arr.indexOf(match);\n}\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nfunction runModifiers(modifiers, data, ends) {\n  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n  modifiersToRun.forEach(function (modifier) {\n    if (modifier.function) {\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n    var fn = modifier.function || modifier.fn;\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nfunction update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  var data = {\n    instance: this,\n    styles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {}\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);\n  data.offsets.popper.position = 'absolute';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n\n/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nfunction isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(function (_ref) {\n    var name = _ref.name,\n        enabled = _ref.enabled;\n    return enabled && name === modifierName;\n  });\n}\n\n/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\nfunction getSupportedPropertyName(property) {\n  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (var i = 0; i < prefixes.length - 1; i++) {\n    var prefix = prefixes[i];\n    var toCheck = prefix ? '' + prefix + upperProp : property;\n    if (typeof window.document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n\n/**\n * Destroy the popper\n * @method\n * @memberof Popper\n */\nfunction destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.left = '';\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicity asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  var isBody = scrollParent.nodeName === 'BODY';\n  var target = isBody ? window : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction setupEventListeners(reference, options, state, updateBound) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  window.addEventListener('resize', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  var scrollElement = getScrollParent(reference);\n  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nfunction enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);\n  }\n}\n\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  window.removeEventListener('resize', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(function (target) {\n    target.removeEventListener('scroll', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger onUpdate callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nfunction disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    window.cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n\n/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nfunction isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setStyles(element, styles) {\n  Object.keys(styles).forEach(function (prop) {\n    var unit = '';\n    // add unit if the value is numeric and is one of the following\n    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {\n      unit = 'px';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n\n/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function (prop) {\n    var value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nfunction applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if the arrow style has been computed, apply the arrow style\n  if (data.offsets.arrow) {\n    setStyles(data.arrowElement, data.offsets.arrow);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper.\n * @param {Object} options - Popper.js options\n */\nfunction applyStyleOnLoad(reference, popper, options, modifierOptions, state) {\n  // compute reference element offsets\n  var referenceOffsets = getReferenceOffsets(state, popper, reference);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);\n\n  popper.setAttribute('x-placement', placement);\n\n  // Apply `position` to popper before anything else because\n  // without the position applied we can't guarantee correct computations\n  setStyles(popper, { position: 'absolute' });\n\n  return options;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeStyle(data, options) {\n  var x = options.x,\n      y = options.y;\n  var popper = data.offsets.popper;\n\n  // Remove this legacy support in Popper.js v2\n\n  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'applyStyle';\n  }).gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');\n  }\n  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;\n\n  var offsetParent = getOffsetParent(data.instance.popper);\n  var offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  var styles = {\n    position: popper.position\n  };\n\n  // floor sides to avoid blurry text\n  var offsets = {\n    left: Math.floor(popper.left),\n    top: Math.floor(popper.top),\n    bottom: Math.floor(popper.bottom),\n    right: Math.floor(popper.right)\n  };\n\n  var sideA = x === 'bottom' ? 'top' : 'bottom';\n  var sideB = y === 'right' ? 'left' : 'right';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  var prefixedProperty = getSupportedPropertyName('transform');\n\n  // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  var left = void 0,\n      top = void 0;\n  if (sideA === 'bottom') {\n    top = -offsetParentRect.height + offsets.bottom;\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === 'right') {\n    left = -offsetParentRect.width + offsets.right;\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    var invertTop = sideA === 'bottom' ? -1 : 1;\n    var invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = sideA + ', ' + sideB;\n  }\n\n  // Attributes\n  var attributes = {\n    'x-placement': data.placement\n  };\n\n  // Update attributes and styles of `data`\n  data.attributes = _extends({}, attributes, data.attributes);\n  data.styles = _extends({}, styles, data.styles);\n\n  return data;\n}\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nfunction isModifierRequired(modifiers, requestingName, requestedName) {\n  var requesting = find(modifiers, function (_ref) {\n    var name = _ref.name;\n    return name === requestingName;\n  });\n\n  var isRequired = !!requesting && modifiers.some(function (modifier) {\n    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;\n  });\n\n  if (!isRequired) {\n    var _requesting = '`' + requestingName + '`';\n    var requested = '`' + requestedName + '`';\n    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');\n  }\n  return isRequired;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction arrow(data, options) {\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  var arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it's a CSS selector\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don't run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn('WARNING: `arrow.element` must be child of its popper element!');\n      return data;\n    }\n  }\n\n  var placement = data.placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n  var len = isVertical ? 'height' : 'width';\n  var side = isVertical ? 'top' : 'left';\n  var altSide = isVertical ? 'left' : 'top';\n  var opSide = isVertical ? 'bottom' : 'right';\n  var arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its reference have enough pixels in conjuction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];\n  }\n\n  // compute center of the popper\n  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  var sideValue = center - getClientRect(data.offsets.popper)[side];\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = {};\n  data.offsets.arrow[side] = Math.round(sideValue);\n  data.offsets.arrow[altSide] = ''; // make sure to unset any eventual altSide value from the DOM node\n\n  return data;\n}\n\n/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nfunction getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n  return variation;\n}\n\n/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-right` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nvar placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];\n\n// Get rid of `auto` `auto-start` and `auto-end`\nvar validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nfunction clockwise(placement) {\n  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var index = validPlacements.indexOf(placement);\n  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n\nvar BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise'\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement);\n\n  var placement = data.placement.split('-')[0];\n  var placementOpposite = getOppositePlacement(placement);\n  var variation = data.placement.split('-')[1] || '';\n\n  var flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach(function (step, index) {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    var popperOffsets = data.offsets.popper;\n    var refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    var floor = Math.floor;\n    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);\n\n    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;\n\n    // flip the variation if required\n    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n    var flippedVariation = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : '');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));\n\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction keepTogether(data) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var placement = data.placement.split('-')[0];\n  var floor = Math.floor;\n  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  var side = isVertical ? 'right' : 'bottom';\n  var opSide = isVertical ? 'left' : 'top';\n  var measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nfunction toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  var split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  var value = +split[1];\n  var unit = split[2];\n\n  // If it's not a number it's an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    var element = void 0;\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    var rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    var size = void 0;\n    if (unit === 'vh') {\n      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n    } else {\n      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nfunction parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {\n  var offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  var fragments = offset.split(/(\\+|\\-)/).map(function (frag) {\n    return frag.trim();\n  });\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  var divider = fragments.indexOf(find(fragments, function (frag) {\n    return frag.search(/,|\\s/) !== -1;\n  }));\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  var splitRegex = /\\s*,\\s*|\\s+/;\n  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map(function (op, index) {\n    // Most of the units rely on the orientation of the popper\n    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';\n    var mergeWithPrevious = false;\n    return op\n    // This aggregates any `+` or `-` sign that aren't considered operators\n    // e.g.: 10 + +5 => [10, +, +5]\n    .reduce(function (a, b) {\n      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n        a[a.length - 1] = b;\n        mergeWithPrevious = true;\n        return a;\n      } else if (mergeWithPrevious) {\n        a[a.length - 1] += b;\n        mergeWithPrevious = false;\n        return a;\n      } else {\n        return a.concat(b);\n      }\n    }, [])\n    // Here we convert the string values into number values (in px)\n    .map(function (str) {\n      return toValue(str, measurement, popperOffsets, referenceOffsets);\n    });\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach(function (op, index) {\n    op.forEach(function (frag, index2) {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nfunction offset(data, _ref) {\n  var offset = _ref.offset;\n  var placement = data.placement,\n      _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var basePlacement = placement.split('-')[0];\n\n  var offsets = void 0;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction preventOverflow(data, options) {\n  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement);\n  options.boundaries = boundaries;\n\n  var order = options.priority;\n  var popper = data.offsets.popper;\n\n  var check = {\n    primary: function primary(placement) {\n      var value = popper[placement];\n      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return defineProperty({}, placement, value);\n    },\n    secondary: function secondary(placement) {\n      var mainSide = placement === 'right' ? 'left' : 'top';\n      var value = popper[mainSide];\n      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {\n        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));\n      }\n      return defineProperty({}, mainSide, value);\n    }\n  };\n\n  order.forEach(function (placement) {\n    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    popper = _extends({}, popper, check[side](placement));\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction shift(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var shiftvariation = placement.split('-')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    var _data$offsets = data.offsets,\n        reference = _data$offsets.reference,\n        popper = _data$offsets.popper;\n\n    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    var side = isVertical ? 'left' : 'top';\n    var measurement = isVertical ? 'width' : 'height';\n\n    var shiftOffsets = {\n      start: defineProperty({}, side, reference[side]),\n      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])\n    };\n\n    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  var refRect = data.offsets.reference;\n  var bound = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'preventOverflow';\n  }).boundaries;\n\n  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction inner(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? 'left' : 'top'] = reference[placement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nvar modifiers = {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unitless, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the height.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * An scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper this makes sure the popper has always a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier, can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent'\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near eachothers\n   * without leaving any gap between the two. Expecially useful when the arrow is\n   * enabled and you want to assure it to point to its reference element.\n   * It cares only about the first axis, you can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjuction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]'\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations).\n     */\n    behavior: 'flip',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position,\n     * the popper will never be placed outside of the defined boundaries\n     * (except if keepTogether is enabled)\n     */\n    boundariesElement: 'viewport'\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3d transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties.\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right'\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define you own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3d transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties.\n     */\n    gpuAcceleration: undefined\n  }\n};\n\n/**\n * The `dataObject` is an object containing all the informations used by Popper.js\n * this object get passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper.\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper, it expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements.\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overriden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass as 3rd argument an object with the same\n * structure of this object, example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nvar Defaults = {\n  /**\n   * Popper's placement\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Whether events (resize, scroll) are initially enabled\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: function onCreate() {},\n\n  /**\n   * Callback called when the popper is updated, this callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: function onUpdate() {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js\n   * @prop {modifiers}\n   */\n  modifiers: modifiers\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n\n// Utils\n// Methods\nvar Popper = function () {\n  /**\n   * Create a new Popper.js instance\n   * @class Popper\n   * @param {HTMLElement|referenceObject} reference - The reference element used to position the popper\n   * @param {HTMLElement} popper - The HTML element used as popper.\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  function Popper(reference, popper) {\n    var _this = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    classCallCheck(this, Popper);\n\n    this.scheduleUpdate = function () {\n      return requestAnimationFrame(_this.update);\n    };\n\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = _extends({}, Popper.Defaults, options);\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: []\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference.jquery ? reference[0] : reference;\n    this.popper = popper.jquery ? popper[0] : popper;\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {\n      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});\n    });\n\n    // Refactoring modifiers' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {\n      return _extends({\n        name: name\n      }, _this.options.modifiers[name]);\n    })\n    // sort the modifiers by order\n    .sort(function (a, b) {\n      return a.order - b.order;\n    });\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(function (modifierOptions) {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    var eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n\n\n  createClass(Popper, [{\n    key: 'update',\n    value: function update$$1() {\n      return update.call(this);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy$$1() {\n      return destroy.call(this);\n    }\n  }, {\n    key: 'enableEventListeners',\n    value: function enableEventListeners$$1() {\n      return enableEventListeners.call(this);\n    }\n  }, {\n    key: 'disableEventListeners',\n    value: function disableEventListeners$$1() {\n      return disableEventListeners.call(this);\n    }\n\n    /**\n     * Schedule an update, it will run on the next UI update available\n     * @method scheduleUpdate\n     * @memberof Popper\n     */\n\n\n    /**\n     * Collection of utilities useful when writing custom modifiers.\n     * Starting from version 1.7, this method is available only if you\n     * include `popper-utils.js` before `popper.js`.\n     *\n     * **DEPRECATION**: This way to access PopperUtils is deprecated\n     * and will be removed in v2! Use the PopperUtils module directly instead.\n     * Due to the high instability of the methods contained in Utils, we can't\n     * guarantee them to follow semver. Use them at your own risk!\n     * @static\n     * @private\n     * @type {Object}\n     * @deprecated since version 1.8\n     * @member Utils\n     * @memberof Popper\n     */\n\n  }]);\n  return Popper;\n}();\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n\n\nPopper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;\nPopper.placements = placements;\nPopper.Defaults = Defaults;\n\nexport default Popper;\n//# sourceMappingURL=popper.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/popper.js/dist/esm/popper.js\n// module id = 1\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 2\n// module chunks = 0"],"sourceRoot":""}